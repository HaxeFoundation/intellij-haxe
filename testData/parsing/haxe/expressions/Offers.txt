Haxe File
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Offers')
    HaxePsiToken:{('{')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          ACCESS
            HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('toString')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          RETURN_STATEMENT
            HaxePsiToken:return('return')
            STRING_LITERAL_EXPRESSION
              HaxePsiToken:OPEN_QUOTE(''')
              HaxePsiToken:REGULAR_STRING_PART('{Offers: num:')
              SHORT_TEMPLATE_ENTRY
                HaxePsiToken:SHORT_TEMPLATE_ENTRY_START('$')
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('offersNum')
              HaxePsiToken:REGULAR_STRING_PART(',')
              HaxePsiToken:REGULAR_STRING_PART('\n')
              LONG_TEMPLATE_ENTRY
                HaxePsiToken:LONG_TEMPLATE_ENTRY_START('${')
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('l')
                    HaxePsiToken:.('.')
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('toString')
                  HaxePsiToken:(('(')
                  HaxePsiToken:)(')')
                  PsiErrorElement:'&&', '(', '.', '...', <<, <additive expression>, <assign operation>, <bitwise expression>, <compare operation>, <multiplicative expression>, <suffix expression>, '=>', '?', '[' or '||' expected, got '\'
                    PsiElement(BAD_CHARACTER)('\')
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('n')
          PsiErrorElement:';', <local function declaration>, <macro class>, <prefix expression>, break, continue, do, for, if, macro, return, switch, throw, try, untyped, var, while or '{' expected, got '}'
            HaxePsiToken:LONG_TEMPLATE_ENTRY_END('}')
          HaxePsiToken:REGULAR_STRING_PART('\n')
          HaxePsiToken:REGULAR_STRING_PART('}')
          HaxePsiToken:CLOSING_QUOTE(''')
          HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          ACCESS
            HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
    HaxePsiToken:}('}')