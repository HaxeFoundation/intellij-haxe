Haxe File
  IMPORT_STATEMENT
    HaxePsiToken:import('import')
    REFERENCE_EXPRESSION
      REFERENCE_EXPRESSION
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('haxe')
        HaxePsiToken:.('.')
        IDENTIFIER
          HaxePsiToken:ID('macro')
      HaxePsiToken:.('.')
      IDENTIFIER
        HaxePsiToken:ID('Expr')
    HaxePsiToken:;(';')
  ENUM_DECLARATION
    HaxePsiToken:enum('enum')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Tree')
    GENERIC_PARAM
      HaxePsiToken:<('<')
      GENERIC_LIST_PART
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('T')
      HaxePsiToken:>('>')
    ENUM_BODY
      HaxePsiToken:{('{')
      ENUM_VALUE_DECLARATION
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('Leaf')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('v')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('T')
        HaxePsiToken:)(')')
        HaxePsiToken:;(';')
      ENUM_VALUE_DECLARATION
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('Node')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('l')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Tree')
                  TYPE_PARAM
                    HaxePsiToken:<('<')
                    TYPE_LIST
                      TYPE_LIST_PART
                        TYPE_OR_ANONYMOUS
                          TYPE
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('T')
                    HaxePsiToken:>('>')
          HaxePsiToken:,(',')
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('r')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Tree')
                  TYPE_PARAM
                    HaxePsiToken:<('<')
                    TYPE_LIST
                      TYPE_LIST_PART
                        TYPE_OR_ANONYMOUS
                          TYPE
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('T')
                    HaxePsiToken:>('>')
        HaxePsiToken:)(')')
        HaxePsiToken:;(';')
      HaxePsiToken:}('}')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Test')
    CLASS_BODY
      HaxePsiToken:{('{')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('macro')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('repeat')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('cond')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Expr')
          HaxePsiToken:,(',')
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('e')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Expr')
        HaxePsiToken:)(')')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('Expr')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          RETURN_STATEMENT
            HaxePsiToken:return('return')
            HaxePsiToken:macro('macro ')
            WHILE_STATEMENT
              HaxePsiToken:while('while')
              HaxePsiToken:(('(')
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('$cond')
              HaxePsiToken:)(')')
              DO_WHILE_BODY
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('trace')
                  HaxePsiToken:(('(')
                  EXPRESSION_LIST
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('$e')
                  HaxePsiToken:)(')')
              HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('meta')
          HaxePsiToken:(('(')
          CONTENT
            PsiElement(CT_META_ARGS)
              COMPILE_TIME_META_ARG
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Inject')
                  HaxePsiToken:(('(')
                  HaxePsiToken:)(')')
          HaxePsiToken:)(')')
      FIELD_DECLARATION
        FIELD_MODIFIER
          HaxePsiToken:private('private')
        MUTABILITY_MODIFIER
          HaxePsiToken:var('var')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('s')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('TextField')
        HaxePsiToken:;(';')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('main')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('x')
              VAR_INIT
                HaxePsiToken:=('=')
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('0')
            HaxePsiToken:;(';')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('repeat')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              COMPARE_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('x')
                COMPARE_OPERATION
                  HaxePsiToken:<('<')
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('10')
              HaxePsiToken:,(',')
              POSTFIX_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('x')
                HaxePsiToken:++('++')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      METHOD_DECLARATION
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('strings')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('name')
              VAR_INIT
                HaxePsiToken:=('=')
                STRING_LITERAL_EXPRESSION
                  HaxePsiToken:OPEN_QUOTE('"')
                  HaxePsiToken:REGULAR_STRING_PART('Haxe')
                  HaxePsiToken:CLOSING_QUOTE('"')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('x')
              VAR_INIT
                HaxePsiToken:=('=')
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('10')
            HaxePsiToken:;(';')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              STRING_LITERAL_EXPRESSION
                HaxePsiToken:OPEN_QUOTE(''')
                SHORT_TEMPLATE_ENTRY
                  HaxePsiToken:SHORT_TEMPLATE_ENTRY_START('$')
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('name')
                HaxePsiToken:REGULAR_STRING_PART(' is ')
                SHORT_TEMPLATE_ENTRY
                  HaxePsiToken:SHORT_TEMPLATE_ENTRY_START('$')
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('x')
                HaxePsiToken:REGULAR_STRING_PART(' times better than X')
                HaxePsiToken:CLOSING_QUOTE(''')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              STRING_LITERAL_EXPRESSION
                HaxePsiToken:OPEN_QUOTE(''')
                LONG_TEMPLATE_ENTRY
                  HaxePsiToken:LONG_TEMPLATE_ENTRY_START('${')
                  CALL_EXPRESSION
                    REFERENCE_EXPRESSION
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('name')
                      HaxePsiToken:.('.')
                      IDENTIFIER
                        HaxePsiToken:ID('toUpperCase')
                    HaxePsiToken:(('(')
                    HaxePsiToken:)(')')
                  HaxePsiToken:LONG_TEMPLATE_ENTRY_END('}')
                HaxePsiToken:REGULAR_STRING_PART(' is ')
                LONG_TEMPLATE_ENTRY
                  HaxePsiToken:LONG_TEMPLATE_ENTRY_START('${')
                  MULTIPLICATIVE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('x')
                    HaxePsiToken:*('*')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('2')
                  HaxePsiToken:LONG_TEMPLATE_ENTRY_END('}')
                HaxePsiToken:REGULAR_STRING_PART(' times better than X')
                HaxePsiToken:CLOSING_QUOTE(''')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      METHOD_DECLARATION
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('patternMatching')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('myTree')
              VAR_INIT
                HaxePsiToken:=('=')
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Node')
                  HaxePsiToken:(('(')
                  EXPRESSION_LIST
                    CALL_EXPRESSION
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('Leaf')
                      HaxePsiToken:(('(')
                      EXPRESSION_LIST
                        STRING_LITERAL_EXPRESSION
                          HaxePsiToken:OPEN_QUOTE('"')
                          HaxePsiToken:REGULAR_STRING_PART('foo')
                          HaxePsiToken:CLOSING_QUOTE('"')
                      HaxePsiToken:)(')')
                    HaxePsiToken:,(',')
                    CALL_EXPRESSION
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('Node')
                      HaxePsiToken:(('(')
                      EXPRESSION_LIST
                        CALL_EXPRESSION
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('Leaf')
                          HaxePsiToken:(('(')
                          EXPRESSION_LIST
                            STRING_LITERAL_EXPRESSION
                              HaxePsiToken:OPEN_QUOTE('"')
                              HaxePsiToken:REGULAR_STRING_PART('bar')
                              HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:)(')')
                        HaxePsiToken:,(',')
                        CALL_EXPRESSION
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('Leaf')
                          HaxePsiToken:(('(')
                          EXPRESSION_LIST
                            STRING_LITERAL_EXPRESSION
                              HaxePsiToken:OPEN_QUOTE('"')
                              HaxePsiToken:REGULAR_STRING_PART('foobar')
                              HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:)(')')
                      HaxePsiToken:)(')')
                  HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('name')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    PARENTHESIZED_EXPRESSION
                      HaxePsiToken:(('(')
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myTree')
                      HaxePsiToken:)(')')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          CALL_EXPRESSION
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('Leaf')
                            HaxePsiToken:(('(')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('s')
                            HaxePsiToken:)(')')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('s')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          CALL_EXPRESSION
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('Node')
                            HaxePsiToken:(('(')
                            EXPRESSION_LIST
                              CALL_EXPRESSION
                                REFERENCE_EXPRESSION
                                  IDENTIFIER
                                    HaxePsiToken:ID('Leaf')
                                HaxePsiToken:(('(')
                                EXPRESSION_LIST
                                  REFERENCE_EXPRESSION
                                    IDENTIFIER
                                      HaxePsiToken:ID('s')
                                HaxePsiToken:)(')')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                            HaxePsiToken:)(')')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('s')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('_')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('none')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('name')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// foo')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('myStructure')
              VAR_INIT
                HaxePsiToken:=('=')
                OBJECT_LITERAL
                  HaxePsiToken:{('{')
                  OBJECT_LITERAL_ELEMENT
                    IDENTIFIER
                      HaxePsiToken:ID('name')
                    HaxePsiToken::(':')
                    STRING_LITERAL_EXPRESSION
                      HaxePsiToken:OPEN_QUOTE('"')
                      HaxePsiToken:REGULAR_STRING_PART('haxe')
                      HaxePsiToken:CLOSING_QUOTE('"')
                  HaxePsiToken:,(',')
                  OBJECT_LITERAL_ELEMENT
                    IDENTIFIER
                      HaxePsiToken:ID('rating')
                    HaxePsiToken::(':')
                    STRING_LITERAL_EXPRESSION
                      HaxePsiToken:OPEN_QUOTE('"')
                      HaxePsiToken:REGULAR_STRING_PART('awesome')
                      HaxePsiToken:CLOSING_QUOTE('"')
                  HaxePsiToken:}('}')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('value')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    PARENTHESIZED_EXPRESSION
                      HaxePsiToken:(('(')
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myStructure')
                      HaxePsiToken:)(')')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          OBJECT_LITERAL
                            HaxePsiToken:{('{')
                            OBJECT_LITERAL_ELEMENT
                              IDENTIFIER
                                HaxePsiToken:ID('name')
                              HaxePsiToken::(':')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('haxe')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:,(',')
                            OBJECT_LITERAL_ELEMENT
                              IDENTIFIER
                                HaxePsiToken:ID('rating')
                              HaxePsiToken::(':')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('poor')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:}('}')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          THROW_STATEMENT
                            HaxePsiToken:throw('throw')
                            LITERAL_EXPRESSION
                              HaxePsiToken:false('false')
                            HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          OBJECT_LITERAL
                            HaxePsiToken:{('{')
                            OBJECT_LITERAL_ELEMENT
                              IDENTIFIER
                                HaxePsiToken:ID('rating')
                              HaxePsiToken::(':')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('awesome')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:,(',')
                            OBJECT_LITERAL_ELEMENT
                              IDENTIFIER
                                HaxePsiToken:ID('name')
                              HaxePsiToken::(':')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('n')
                            HaxePsiToken:}('}')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('n')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('_')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('no awesome language found')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('value')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// haxe')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('myArray')
              VAR_INIT
                HaxePsiToken:=('=')
                ARRAY_LITERAL
                  HaxePsiToken:[('[')
                  EXPRESSION_LIST
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('1')
                    HaxePsiToken:,(',')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('6')
                  HaxePsiToken:](']')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('match')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    PARENTHESIZED_EXPRESSION
                      HaxePsiToken:(('(')
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myArray')
                      HaxePsiToken:)(')')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              LITERAL_EXPRESSION
                                HaxePsiToken:LITINT('2')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('0')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                              HaxePsiToken:,(',')
                              LITERAL_EXPRESSION
                                HaxePsiToken:LITINT('6')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('1')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('2')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('3')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('_')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('4')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('match')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 1')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('match')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    PARENTHESIZED_EXPRESSION
                      HaxePsiToken:(('(')
                      LITERAL_EXPRESSION
                        HaxePsiToken:LITINT('7')
                      HaxePsiToken:)(')')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          BITWISE_EXPRESSION
                            LITERAL_EXPRESSION
                              HaxePsiToken:LITINT('4')
                            BIT_OPERATION
                              HaxePsiToken:|('|')
                            LITERAL_EXPRESSION
                              HaxePsiToken:LITINT('1')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('0')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          BITWISE_EXPRESSION
                            LITERAL_EXPRESSION
                              HaxePsiToken:LITINT('6')
                            BIT_OPERATION
                              HaxePsiToken:|('|')
                            LITERAL_EXPRESSION
                              HaxePsiToken:LITINT('7')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('1')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('_')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('2')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('match')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 1')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('myArray')
              VAR_INIT
                HaxePsiToken:=('=')
                ARRAY_LITERAL
                  HaxePsiToken:[('[')
                  EXPRESSION_LIST
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('7')
                    HaxePsiToken:,(',')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('6')
                  HaxePsiToken:](']')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('s')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    PARENTHESIZED_EXPRESSION
                      HaxePsiToken:(('(')
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myArray')
                      HaxePsiToken:)(')')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('a')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('b')
                            HaxePsiToken:](']')
                        GUARD
                          HaxePsiToken:if('if')
                          HaxePsiToken:(('(')
                          COMPARE_EXPRESSION
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('b')
                            COMPARE_OPERATION
                              HaxePsiToken:>('>')
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('a')
                          HaxePsiToken:)(')')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          ADDITIVE_EXPRESSION
                            ADDITIVE_EXPRESSION
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('b')
                              HaxePsiToken:+('+')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('>')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:+('+')
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('a')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('a')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('b')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          ADDITIVE_EXPRESSION
                            ADDITIVE_EXPRESSION
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('b')
                              HaxePsiToken:+('+')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('<=')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:+('+')
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('a')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('_')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('found something else')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('s')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 6<=7')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('s')
              VAR_INIT
                HaxePsiToken:=('=')
                VALUE_EXPRESSION
                  SWITCH_STATEMENT
                    HaxePsiToken:switch('switch')
                    ARRAY_LITERAL
                      HaxePsiToken:[('[')
                      EXPRESSION_LIST
                        LITERAL_EXPRESSION
                          HaxePsiToken:LITINT('1')
                        HaxePsiToken:,(',')
                        LITERAL_EXPRESSION
                          HaxePsiToken:false('false')
                        HaxePsiToken:,(',')
                        STRING_LITERAL_EXPRESSION
                          HaxePsiToken:OPEN_QUOTE('"')
                          HaxePsiToken:REGULAR_STRING_PART('foo')
                          HaxePsiToken:CLOSING_QUOTE('"')
                      HaxePsiToken:](']')
                    SWITCH_BLOCK
                      HaxePsiToken:{('{')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              LITERAL_EXPRESSION
                                HaxePsiToken:LITINT('1')
                              HaxePsiToken:,(',')
                              LITERAL_EXPRESSION
                                HaxePsiToken:false('false')
                              HaxePsiToken:,(',')
                              STRING_LITERAL_EXPRESSION
                                HaxePsiToken:OPEN_QUOTE('"')
                                HaxePsiToken:REGULAR_STRING_PART('bar')
                                HaxePsiToken:CLOSING_QUOTE('"')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('0')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                              HaxePsiToken:,(',')
                              LITERAL_EXPRESSION
                                HaxePsiToken:true('true')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('1')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      SWITCH_CASE
                        HaxePsiToken:case('case')
                        SWITCH_CASE_EXPR
                          ARRAY_LITERAL
                            HaxePsiToken:[('[')
                            EXPRESSION_LIST
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                              HaxePsiToken:,(',')
                              LITERAL_EXPRESSION
                                HaxePsiToken:false('false')
                              HaxePsiToken:,(',')
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('_')
                            HaxePsiToken:](']')
                        HaxePsiToken::(':')
                        SWITCH_CASE_BLOCK
                          STRING_LITERAL_EXPRESSION
                            HaxePsiToken:OPEN_QUOTE('"')
                            HaxePsiToken:REGULAR_STRING_PART('2')
                            HaxePsiToken:CLOSING_QUOTE('"')
                          HaxePsiToken:;(';')
                      HaxePsiToken:}('}')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('s')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 2')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')
  PsiElement(EMBEDDED_META)
    COMPILE_TIME_META
      HaxePsiToken:@:('@:')
      TYPE
        HaxePsiToken:META_TYPE('coreType')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Kilometer')
    IDENTIFIER
      HaxePsiToken:ID('from')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Int')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Main')
    CLASS_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('main')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('km')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('Kilometer')
              VAR_INIT
                HaxePsiToken:=('=')
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('1')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('n')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('Int')
              VAR_INIT
                HaxePsiToken:=('=')
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('km')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// Kilometer should be Int')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Void')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// value type with no relations')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Int')
    IDENTIFIER
      HaxePsiToken:ID('to')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Float')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// value type which implicit casts to Float')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('UInt')
    IDENTIFIER
      HaxePsiToken:ID('to')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Int')
    IDENTIFIER
      HaxePsiToken:ID('from')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Int')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// value types which auto-casts to and from Int')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('EnumFlags')
    GENERIC_PARAM
      HaxePsiToken:<('<')
      GENERIC_LIST_PART
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('T')
        HaxePsiToken::(':')
        TYPE_LIST_PART
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('EnumValue')
      HaxePsiToken:>('>')
    UNDERLYING_TYPE
      HaxePsiToken:(('(')
      TYPE_OR_ANONYMOUS
        TYPE
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('Int')
      HaxePsiToken:)(')')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// opaque type based on Int')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Vector')
    GENERIC_PARAM
      HaxePsiToken:<('<')
      GENERIC_LIST_PART
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('T')
      HaxePsiToken:>('>')
    UNDERLYING_TYPE
      HaxePsiToken:(('(')
      TYPE_OR_ANONYMOUS
        TYPE
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('VectorData')
          TYPE_PARAM
            HaxePsiToken:<('<')
            TYPE_LIST
              TYPE_LIST_PART
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('T')
            HaxePsiToken:>('>')
      HaxePsiToken:)(')')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// opaque type based on VectorData<T>')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('StringSplitter')
    UNDERLYING_TYPE
      HaxePsiToken:(('(')
      TYPE_OR_ANONYMOUS
        TYPE
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('Array')
          TYPE_PARAM
            HaxePsiToken:<('<')
            TYPE_LIST
              TYPE_LIST_PART
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('String')
            HaxePsiToken:>('>')
      HaxePsiToken:)(')')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:inline('inline')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:new('new')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('a')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('Array')
                  TYPE_PARAM
                    HaxePsiToken:<('<')
                    TYPE_LIST
                      TYPE_LIST_PART
                        TYPE_OR_ANONYMOUS
                          TYPE
                            REFERENCE_EXPRESSION
                              IDENTIFIER
                                HaxePsiToken:ID('String')
                    HaxePsiToken:>('>')
        HaxePsiToken:)(')')
        ASSIGN_EXPRESSION
          THIS_EXPRESSION
            HaxePsiToken:this('this')
          ASSIGN_OPERATION
            HaxePsiToken:=('=')
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('a')
        HaxePsiToken:;(';')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('from')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        METHOD_MODIFIER
          HaxePsiToken:inline('inline')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('fromString')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('s')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('String')
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          RETURN_STATEMENT
            HaxePsiToken:return('return')
            NEW_EXPRESSION
              HaxePsiToken:new('new')
              TYPE
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('StringSplitter')
              HaxePsiToken:(('(')
              CALL_EXPRESSION
                REFERENCE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('s')
                  HaxePsiToken:.('.')
                  IDENTIFIER
                    HaxePsiToken:ID('split')
                HaxePsiToken:(('(')
                EXPRESSION_LIST
                  STRING_LITERAL_EXPRESSION
                    HaxePsiToken:OPEN_QUOTE('"')
                    HaxePsiToken:CLOSING_QUOTE('"')
                HaxePsiToken:)(')')
              HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')
  ABSTRACT_CLASS_DECLARATION
    ABSTRACT_CLASS_TYPE
      HaxePsiToken:abstract('abstract')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('MyInt')
    UNDERLYING_TYPE
      HaxePsiToken:(('(')
      TYPE_OR_ANONYMOUS
        TYPE
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('Int')
      HaxePsiToken:)(')')
    IDENTIFIER
      HaxePsiToken:ID('from')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Int')
    IDENTIFIER
      HaxePsiToken:ID('to')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          IDENTIFIER
            HaxePsiToken:ID('Int')
    ABSTRACT_BODY
      HaxePsiToken:{('{')
      PsiComment(MSL_COMMENT)('// MyInt + MyInt can be used as is, and returns a MyInt')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('op')
          HaxePsiToken:(('(')
          CONTENT
            PsiElement(CT_META_ARGS)
              COMPILE_TIME_META_ARG
                ADDITIVE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('A')
                  HaxePsiToken:+('+')
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('B')
          HaxePsiToken:)(')')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('add')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('lhs')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('MyInt')
          HaxePsiToken:,(',')
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('rhs')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('MyInt')
        HaxePsiToken:)(')')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('MyInt')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('commutative')
      PsiElement(EMBEDDED_META)
        COMPILE_TIME_META
          HaxePsiToken:@:('@:')
          TYPE
            HaxePsiToken:META_TYPE('op')
          HaxePsiToken:(('(')
          CONTENT
            PsiElement(CT_META_ARGS)
              COMPILE_TIME_META_ARG
                MULTIPLICATIVE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('A')
                  HaxePsiToken:*('*')
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('B')
          HaxePsiToken:)(')')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('repeat')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('lhs')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('MyInt')
          HaxePsiToken:,(',')
          PARAMETER
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('rhs')
            TYPE_TAG
              HaxePsiToken::(':')
              TYPE_OR_ANONYMOUS
                TYPE
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('String')
        HaxePsiToken:)(')')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('String')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('s')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('StringBuf')
              VAR_INIT
                HaxePsiToken:=('=')
                NEW_EXPRESSION
                  HaxePsiToken:new('new')
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('StringBuf')
                  HaxePsiToken:(('(')
                  HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          FOR_STATEMENT
            HaxePsiToken:for('for')
            HaxePsiToken:(('(')
            COMPONENT_NAME
              IDENTIFIER
                HaxePsiToken:ID('i')
            HaxePsiToken:in('in')
            ITERABLE
              ITERATOR_EXPRESSION
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('0')
                HaxePsiToken:...('...')
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('lhs')
            HaxePsiToken:)(')')
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('s')
                HaxePsiToken:.('.')
                IDENTIFIER
                  HaxePsiToken:ID('add')
              HaxePsiToken:(('(')
              EXPRESSION_LIST
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('rhs')
              HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          RETURN_STATEMENT
            HaxePsiToken:return('return')
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('s')
                HaxePsiToken:.('.')
                IDENTIFIER
                  HaxePsiToken:ID('toString')
              HaxePsiToken:(('(')
              HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')