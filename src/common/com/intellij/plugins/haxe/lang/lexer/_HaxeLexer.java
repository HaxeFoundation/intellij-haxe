/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2014 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 06.11.14 19:52 */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06.11.14 19:52 from the specification file
 * <tt>/home/as3boyan/IdeaProjects/intellij-haxe-EBatTiVo/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\105\1\0\1\1\1\6\22\0\1\65\1\20\1\41"+
    "\1\14\1\7\1\104\1\101\1\42\1\21\1\22\1\13\1\37\1\73"+
    "\1\74\1\40\1\12\1\31\7\30\2\27\1\11\1\72\1\102\1\76"+
    "\1\75\1\77\1\10\1\26\1\66\2\26\1\36\1\26\21\2\1\33"+
    "\2\2\1\70\1\5\1\71\1\103\1\3\1\0\1\51\1\47\1\57"+
    "\1\53\1\23\1\16\1\60\1\62\1\15\1\2\1\52\1\24\1\35"+
    "\1\45\1\61\1\56\1\67\1\50\1\25\1\55\1\54\1\63\1\46"+
    "\1\32\1\64\1\2\1\43\1\100\1\44\1\34\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0"+
    "\14\2\16\0\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0"+
    "\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\123\2\1\0\213\2\10\0\236\2\11\0\46\2\2\0"+
    "\1\2\7\0\47\2\110\0\33\2\5\0\3\2\55\0\53\2\25\0"+
    "\12\4\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0"+
    "\2\2\12\4\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0"+
    "\131\2\13\0\1\2\16\0\12\4\41\2\11\0\2\2\4\0\1\2"+
    "\5\0\26\2\4\0\1\2\11\0\1\2\3\0\1\2\27\0\31\2"+
    "\253\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0\12\4"+
    "\1\0\7\2\1\0\7\2\5\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\3\2\4\0\12\4\2\2\23\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\37\0\4\2\1\0\1\2\7\0\12\4\2\0\3\2\20\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\22\0\1\2\17\0\2\2\4\0\12\4\25\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\4\1\0"+
    "\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\14\2\26\0\1\2\25\0\12\4\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\3\0\1\2\32\0\2\2\6\0"+
    "\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2\4\0"+
    "\12\4\1\0\2\2\22\0\10\2\1\0\3\2\1\0\51\2\2\0"+
    "\1\2\20\0\1\2\21\0\2\2\4\0\12\4\12\0\6\2\5\0"+
    "\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0"+
    "\60\2\1\0\2\2\14\0\7\2\11\0\12\4\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0"+
    "\12\4\2\0\2\2\42\0\1\2\37\0\12\4\26\0\10\2\1\0"+
    "\44\2\33\0\5\2\163\0\53\2\24\0\1\2\12\4\6\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2"+
    "\14\0\1\2\1\0\12\4\6\0\46\2\12\0\53\2\1\0\1\2"+
    "\3\0\u0149\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2"+
    "\2\0\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2"+
    "\1\0\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2"+
    "\16\0\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2"+
    "\4\0\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\0\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0"+
    "\5\2\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0"+
    "\65\2\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0"+
    "\7\2\4\0\12\4\51\0\36\2\15\0\2\2\12\4\6\0\46\2"+
    "\32\0\44\2\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2"+
    "\1\0\4\2\16\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\164\0\1\2\15\0\1\2\20\0\15\2\145\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\21\0\46\2\12\0\66\2\11\0\1\2"+
    "\20\0\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2"+
    "\u01d5\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2"+
    "\1\0\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2"+
    "\65\0\20\2\u0200\0\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2"+
    "\2\0\u010d\2\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2"+
    "\10\0\106\2\61\0\11\2\2\0\147\2\2\0\4\2\1\0\2\2"+
    "\16\0\12\2\120\0\10\2\1\0\3\2\1\0\4\2\1\0\27\2"+
    "\35\0\64\2\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2"+
    "\4\0\12\4\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0"+
    "\1\2\12\4\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4"+
    "\6\0\27\2\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2"+
    "\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\43\0\6\2"+
    "\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2\221\0\43\2"+
    "\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2"+
    "\2\0\76\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\2\3\1\7\1\10\1\11\2\3\2\12\1\1"+
    "\1\3\1\13\1\14\1\15\1\16\1\17\1\20\14\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\36"+
    "\1\40\1\36\1\37\2\41\4\37\1\42\1\43\3\0"+
    "\1\44\1\0\1\45\1\46\1\47\1\50\2\0\1\51"+
    "\1\3\1\52\3\3\1\53\6\3\1\54\1\0\1\55"+
    "\1\0\1\3\1\56\1\57\1\0\7\3\1\60\16\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\36\1\76\1\77"+
    "\1\41\2\0\3\100\16\44\1\46\1\101\4\0\5\3"+
    "\1\102\6\3\1\103\1\0\1\104\1\3\1\105\1\106"+
    "\13\3\1\107\13\3\1\110\1\111\1\41\1\100\5\44"+
    "\1\112\15\44\1\0\2\101\2\0\1\113\1\0\6\3"+
    "\1\114\1\3\1\115\3\3\1\104\2\3\1\116\10\3"+
    "\1\117\1\120\6\3\1\121\1\122\3\3\1\123\23\44"+
    "\1\46\1\0\3\124\1\125\1\0\4\3\1\126\4\3"+
    "\1\127\2\3\1\130\1\131\1\132\4\3\1\133\1\3"+
    "\1\134\4\3\1\135\1\136\2\3\3\44\1\137\3\44"+
    "\1\140\4\44\1\141\5\44\1\142\2\0\1\143\1\3"+
    "\1\144\1\145\3\3\1\146\1\147\1\150\1\151\1\152"+
    "\7\3\1\153\2\3\1\154\2\44\1\155\3\44\1\156"+
    "\2\44\1\157\4\44\1\124\1\0\3\3\1\160\1\3"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\2\3\1\44"+
    "\1\167\1\170\1\44\1\171\4\44\1\172\1\44\1\0"+
    "\2\3\1\173\1\174\1\175\1\176\1\44\1\177\1\200"+
    "\4\44\1\3\1\201\1\202\2\44\1\203\1\204\1\205"+
    "\1\206\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u015e\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u015e\0\u015e\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u015e\0\u015e\0\u015e\0\u015e\0\u0690"+
    "\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u0992\0\u015e\0\u015e\0\u015e\0\u015e\0\u09d8"+
    "\0\u015e\0\u0a1e\0\u015e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u0c4e\0\u015e\0\u0c94\0\u015e\0\u0cda\0\u0d20"+
    "\0\u0230\0\u0276\0\u0348\0\u0578\0\u015e\0\u015e\0\u0230\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u015e\0\u015e\0\u0f0a"+
    "\0\u0f50\0\u01ea\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u015e"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u015e\0\u1324\0\u136a\0\u015e\0\u015e\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u01ea\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u19b4\0\u015e"+
    "\0\u015e\0\u015e\0\u19fa\0\u015e\0\u1a40\0\u1a86\0\u1acc\0\u015e"+
    "\0\u0dac\0\u0d66\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\u21a2\0\u01ea\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u12de\0\u238c\0\u23d2\0\u2418\0\u015e\0\u01ea"+
    "\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u01ea\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u01ea"+
    "\0\u015e\0\u2a62\0\u1a86\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0"+
    "\0\u0df2\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa"+
    "\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda"+
    "\0\u015e\0\u3020\0\u3066\0\u015e\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u01ea\0\u3296\0\u01ea\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u01ea\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u01ea\0\u01ea\0\u36b0"+
    "\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u01ea\0\u01ea\0\u3854"+
    "\0\u389a\0\u38e0\0\u0cda\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e"+
    "\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e"+
    "\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u015e\0\u3e58"+
    "\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u40ce\0\u01ea\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u01ea\0\u422c"+
    "\0\u4272\0\u01ea\0\u01ea\0\u01ea\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u01ea\0\u43d0\0\u01ea\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u01ea"+
    "\0\u01ea\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u0df2\0\u468c"+
    "\0\u46d2\0\u4718\0\u0df2\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u0df2"+
    "\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u0df2\0\u49d4\0\u4a1a"+
    "\0\u015e\0\u4a60\0\u01ea\0\u01ea\0\u4aa6\0\u4aec\0\u4b32\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u4b78\0\u01ea\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u01ea\0\u4da8\0\u4dee\0\u0df2\0\u4e34"+
    "\0\u4e7a\0\u0df2\0\u4ec0\0\u4f06\0\u4f4c\0\u0df2\0\u4f92\0\u4fd8"+
    "\0\u0df2\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u49d4\0\u5136\0\u517c"+
    "\0\u51c2\0\u5208\0\u01ea\0\u524e\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u5294\0\u52da\0\u5320\0\u0df2\0\u0df2\0\u5366"+
    "\0\u0df2\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u0df2\0\u54c4\0\u550a"+
    "\0\u5550\0\u5596\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u55dc\0\u0df2"+
    "\0\u0df2\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u01ea\0\u0df2"+
    "\0\u5780\0\u57c6\0\u0df2\0\u0df2\0\u01ea\0\u0df2\0\u0df2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\7\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\7\1\21"+
    "\1\22\1\23\1\24\1\10\1\25\1\10\2\26\1\27"+
    "\2\10\1\30\1\31\1\10\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\10"+
    "\1\45\1\46\1\47\1\50\1\51\1\10\1\52\1\10"+
    "\1\53\1\10\1\7\2\10\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\7\5\71\1\72\1\71\1\73\31\71\1\74"+
    "\44\71\5\75\1\72\1\75\1\73\32\75\1\74\43\75"+
    "\2\76\2\77\11\76\2\77\4\76\4\77\3\76\2\77"+
    "\1\76\2\77\6\76\10\77\1\100\7\77\1\76\2\77"+
    "\15\76\1\0\1\76\1\7\2\10\1\101\1\76\1\7"+
    "\1\10\1\102\1\13\1\14\1\15\1\103\1\17\1\20"+
    "\1\7\1\21\1\22\1\23\1\24\1\10\1\25\1\10"+
    "\2\26\1\27\2\10\1\104\1\31\1\10\1\32\1\33"+
    "\1\34\1\35\1\105\1\106\1\40\1\41\1\42\1\43"+
    "\1\44\1\10\1\45\1\46\1\47\1\50\1\51\1\10"+
    "\1\52\1\10\1\53\1\10\1\7\2\10\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\7\107\0\1\7\4\0\1\7"+
    "\10\0\1\7\45\0\1\7\17\0\1\7\2\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\22\0\1\107\16\0\1\110"+
    "\3\0\3\107\4\0\1\110\1\0\1\111\47\0\2\112"+
    "\3\0\1\112\1\0\1\113\3\0\2\112\4\0\4\112"+
    "\3\0\2\112\1\0\2\112\6\0\20\112\1\0\2\112"+
    "\30\0\1\114\1\115\62\0\1\116\105\0\1\117\24\0"+
    "\1\120\5\0\1\121\64\0\3\10\2\0\1\10\5\0"+
    "\1\10\1\122\4\0\11\10\1\0\1\123\1\10\6\0"+
    "\1\124\17\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\4\10"+
    "\1\125\2\10\1\126\4\10\1\127\3\10\1\0\2\10"+
    "\114\0\1\130\11\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\10\1\131\5\10\1\132\1\10\1\0\2\10"+
    "\6\0\1\133\17\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\1\10\1\134\5\10\1\135\1\136\7\10\1\0\2\10"+
    "\22\0\1\107\16\0\1\110\3\0\3\26\4\0\1\110"+
    "\1\0\1\111\51\0\1\107\16\0\1\110\3\0\1\107"+
    "\2\137\2\140\2\0\1\110\1\0\1\111\45\0\12\141"+
    "\1\142\73\141\2\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\4\10\1\143\13\10"+
    "\1\0\2\10\55\0\1\144\36\0\1\145\13\0\1\111"+
    "\22\0\3\111\6\0\1\146\47\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\1\147\10\10\1\0\2\10\6\0"+
    "\7\10\1\150\10\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\15\10\1\151\2\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\3\10\1\152\14\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\153\10\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\2\10"+
    "\1\154\15\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\1\155\10\10\1\0\2\10\6\0"+
    "\14\10\1\156\2\10\1\157\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\2\10\1\160\6\10"+
    "\1\0\2\10\6\0\1\161\17\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\3\10\1\162\11\10\1\163\1\10\1\164"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\3\10\1\165\1\166"+
    "\2\10\1\167\10\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\10\1\170\7\10\1\0"+
    "\2\10\6\0\4\10\1\171\7\10\1\172\3\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\16\10\1\173\1\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\4\10\1\174\13\10\1\0"+
    "\2\10\112\0\1\175\1\176\1\177\104\0\1\200\1\201"+
    "\105\0\1\202\1\0\1\203\103\0\1\204\2\0\1\205"+
    "\102\0\1\206\3\0\1\207\101\0\1\210\105\0\1\211"+
    "\7\0\5\71\1\0\1\71\1\0\31\71\1\0\44\71"+
    "\6\212\1\0\76\212\3\0\2\213\11\0\2\213\4\0"+
    "\4\213\3\0\2\213\1\0\2\213\4\0\1\214\1\0"+
    "\20\213\1\0\2\213\16\0\5\75\1\0\1\75\1\0"+
    "\32\75\1\0\43\75\2\0\3\77\10\0\2\77\4\0"+
    "\11\77\1\0\2\77\6\0\20\77\1\0\2\77\20\0"+
    "\3\77\10\0\2\77\4\0\11\77\1\0\2\77\6\0"+
    "\15\77\1\215\2\77\1\0\2\77\22\0\1\216\22\0"+
    "\3\216\5\0\1\217\34\0\1\217\11\0\4\220\1\221"+
    "\16\220\1\222\3\220\3\221\4\220\1\222\1\220\1\0"+
    "\45\220\2\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\20\112\1\0\2\112\20\0"+
    "\2\112\3\0\1\112\5\0\1\112\1\223\4\0\2\112"+
    "\1\224\1\112\3\0\2\112\1\0\1\225\1\112\6\0"+
    "\1\226\1\112\1\227\1\230\1\231\1\232\1\233\2\112"+
    "\1\234\1\235\1\236\1\237\1\240\2\112\1\0\2\112"+
    "\16\0\6\114\1\0\76\114\1\0\13\241\1\242\72\241"+
    "\16\0\1\243\113\0\1\244\20\0\1\245\2\0\1\246"+
    "\37\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\11\10\1\247\6\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\1\10"+
    "\1\250\7\10\1\0\2\10\6\0\10\10\1\251\7\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\10\1\252\7\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\1\253\17\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\3\10\1\254\14\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\2\10\1\255\6\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\10\10\1\256\7\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\7\10\1\257\10\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\1\260\1\10"+
    "\4\0\11\10\1\0\2\10\6\0\20\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\11\10\1\261\6\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\4\10\1\262\13\10\1\0\2\10"+
    "\22\0\1\107\16\0\1\110\3\0\1\107\2\137\4\0"+
    "\1\110\1\0\1\111\63\0\1\263\4\0\1\263\2\0"+
    "\4\263\4\0\1\263\10\0\1\263\1\0\1\263\1\0"+
    "\1\263\3\0\1\263\6\0\1\263\17\0\5\142\1\264"+
    "\4\142\1\265\73\142\2\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\12\10\1\266"+
    "\5\10\1\0\2\10\56\0\1\267\47\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\1\10\1\270\14\10\1\271\1\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\1\10\1\272"+
    "\7\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\1\273\1\10\4\0\11\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\1\274\10\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\10\10\1\275\7\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\2\10\1\276\6\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\1\10\1\277\4\0\11\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\1\300"+
    "\17\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\1\301\1\10\4\0\11\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\10\10\1\302\7\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\7\10\1\303\7\10"+
    "\1\304\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\1\305\1\10\4\0\11\10\1\0\2\10\6\0\3\10"+
    "\1\306\14\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\11\10"+
    "\1\307\6\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\1\310\1\10\4\0\11\10\1\0\2\10\6\0"+
    "\20\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\12\10\1\311"+
    "\5\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\2\10\1\312"+
    "\15\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\4\10\1\313"+
    "\13\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\2\10\1\314\6\10\1\0\2\10\6\0"+
    "\10\10\1\315\7\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\1\316\17\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\1\317\10\10\1\0\2\10\6\0"+
    "\20\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\3\10\1\320"+
    "\14\10\1\0\2\10\114\0\1\321\11\0\3\213\10\0"+
    "\2\213\4\0\11\213\1\0\2\213\6\0\20\213\1\0"+
    "\2\213\20\0\3\77\10\0\1\322\1\77\4\0\11\77"+
    "\1\0\2\77\6\0\20\77\1\0\2\77\16\0\4\220"+
    "\1\323\22\220\3\323\6\220\1\0\45\220\4\0\1\216"+
    "\22\0\3\216\56\0\3\112\2\0\1\112\5\0\1\324"+
    "\1\112\4\0\11\112\1\0\2\112\6\0\4\112\1\325"+
    "\13\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\1\326\10\112\1\0\2\112\6\0\20\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\1\327\10\112\1\0\2\112\6\0\4\112\1\330"+
    "\13\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\2\112\1\331\6\112\1\0\2\112\6\0"+
    "\4\112\1\332\7\112\1\333\3\112\1\0\2\112\20\0"+
    "\3\112\2\0\1\112\5\0\1\334\1\112\4\0\11\112"+
    "\1\0\2\112\6\0\7\112\1\335\10\112\1\0\2\112"+
    "\20\0\3\112\2\0\1\112\5\0\2\112\4\0\1\336"+
    "\10\112\1\0\2\112\6\0\20\112\1\0\2\112\20\0"+
    "\3\112\2\0\1\112\5\0\2\112\4\0\11\112\1\0"+
    "\2\112\6\0\7\112\1\337\10\112\1\0\2\112\20\0"+
    "\3\112\2\0\1\112\5\0\2\112\4\0\1\340\10\112"+
    "\1\0\2\112\6\0\20\112\1\0\2\112\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\1\341\10\112\1\0"+
    "\2\112\6\0\20\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\3\112\1\342\14\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\14\112\1\343\3\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\1\344\10\112\1\0\2\112"+
    "\6\0\20\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\16\112"+
    "\1\345\1\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\4\112"+
    "\1\346\13\112\1\0\2\112\16\0\13\241\1\347\72\241"+
    "\12\350\1\351\1\242\72\350\17\0\1\352\45\0\1\352"+
    "\45\0\1\353\133\0\1\354\102\0\1\355\37\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\1\10\1\356\7\10"+
    "\1\0\2\10\6\0\14\10\1\357\3\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\1\360\1\10\4\0"+
    "\11\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\1\361\10\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\2\10\1\362\6\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\12\10\1\363\5\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\1\364\10\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\365\10\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\1\366\1\10\6\0"+
    "\20\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\10\10\1\367"+
    "\7\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\1\370\10\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\10\10\1\371\7\10"+
    "\1\0\2\10\16\0\5\142\1\264\4\142\1\372\73\142"+
    "\15\0\1\265\7\0\1\265\7\0\1\265\16\0\1\265"+
    "\3\0\1\265\27\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\3\10\1\373\14\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\374\10\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\1\10\1\375\7\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\1\10\1\376\7\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\4\10\1\377\13\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\7\10\1\u0100\10\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\10\10\1\u0101\7\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\4\10\1\u0102\13\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\4\10\1\u0103\13\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\1\u0104\17\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\17\10\1\u0105\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\1\u0106\10\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\2\10\1\u0107\6\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\14\10\1\u0108\3\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\1\u0109\10\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\16\10\1\u010a\1\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\11\10\1\0\2\10\6\0"+
    "\5\10\1\u010b\12\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\10\1\u010c\7\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\2\10\1\u010d\6\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\u010e\10\10\1\0\2\10"+
    "\6\0\10\10\1\u010f\7\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\12\10\1\u0110\5\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\10\10\1\u0111\7\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\3\10\1\u0112\14\10\1\0\2\10\20\0\3\77"+
    "\10\0\2\77\4\0\2\77\1\u0113\6\77\1\0\2\77"+
    "\6\0\20\77\1\0\2\77\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\1\u0114"+
    "\17\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\5\112\1\u0115"+
    "\12\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\10\112\1\u0116"+
    "\7\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\10\112\1\u0117"+
    "\7\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\12\112\1\u0118"+
    "\5\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\10\112\1\u0119"+
    "\7\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\6\112\1\u011a"+
    "\11\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\1\u011b\7\112"+
    "\1\u011c\7\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\1\u011d\1\112\4\0\11\112\1\0\2\112\6\0"+
    "\20\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\20\112\1\0"+
    "\1\112\1\u011e\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\10\112\1\u011f\7\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\1\u0120\10\112\1\0\2\112\6\0\20\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\2\112\1\u0121\15\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\14\112\1\u0122\3\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\3\112\1\u0123\14\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\10\112\1\u0124\7\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\1\u0125\10\112\1\0\2\112\6\0\20\112\1\0\2\112"+
    "\20\0\3\112\2\0\1\112\5\0\2\112\4\0\11\112"+
    "\1\0\2\112\6\0\12\112\1\u0126\5\112\1\0\2\112"+
    "\16\0\12\241\1\u0127\1\347\72\241\13\350\1\u0128\72\350"+
    "\6\u0129\1\0\10\u0129\1\352\1\u012a\1\u012b\43\u0129\1\352"+
    "\17\u0129\24\0\1\u012c\143\0\1\u012d\26\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\u012e\10\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\3\10"+
    "\1\u012f\14\10\1\0\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\1\u0130"+
    "\17\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\3\10\1\u0131"+
    "\14\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\1\u0132\10\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\10\10\1\u0133\7\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\1\u0134\2\10\1\u0135"+
    "\14\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\12\10\1\u0136"+
    "\5\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\3\10\1\u0137"+
    "\14\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\1\u0138\1\10\4\0\11\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\16\0\5\142\1\264\4\142\1\265\2\142"+
    "\1\372\7\142\1\372\7\142\1\372\16\142\1\372\3\142"+
    "\1\372\25\142\2\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\14\10\1\u0139\3\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\3\10\1\u013a\14\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\u013b\10\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\5\10\1\u013c\12\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\3\10\1\u013d\14\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\3\10\1\u013e\14\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\7\10\1\u013f\10\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\1\u0140\1\10\6\0\20\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\13\10\1\u0141\4\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\11\10\1\u0142\6\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\1\10\1\u0143\16\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\6\10\1\u0144\11\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\4\10\1\u0145\13\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\4\10\1\u0146\13\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\1\u0147\1\10\4\0"+
    "\11\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\2\10\1\u0148"+
    "\6\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\15\10\1\u0149\2\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\1\u014a\1\10\4\0\11\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\3\10\1\u014b\14\10\1\0\2\10\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\2\112"+
    "\6\0\4\112\1\u014c\13\112\1\0\2\112\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\1\u014d\10\112\1\0"+
    "\2\112\6\0\20\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\10\112\1\u014e\7\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\4\112\1\u014f\13\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\3\112\1\u0150\14\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\1\u0151\1\112\4\0\11\112\1\0\2\112"+
    "\6\0\20\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\1\u0152\10\112\1\0\2\112\6\0"+
    "\20\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\6\112\1\u0153"+
    "\11\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\1\u0154\1\112\6\0\20\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\1\112\1\u0155\7\112\1\0\2\112\6\0\20\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\7\112\1\u0156\10\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\14\112\1\u0157\3\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\11\112\1\u0158\6\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\7\112\1\u0159\10\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\10\112\1\u015a\7\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\1\u015b\10\112\1\0\2\112\6\0\20\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\10\112\1\u015c\7\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\3\112\1\u015d\14\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\2\112\6\0\5\112\1\u015e\12\112\1\0"+
    "\2\112\16\0\12\350\1\351\1\u0128\72\350\6\u0129\1\0"+
    "\10\u0129\1\0\45\u0129\1\0\17\u0129\1\0\6\u0129\1\0"+
    "\10\u0129\1\0\1\u0129\1\u012b\43\u0129\1\0\17\u0129\1\0"+
    "\6\u012b\1\0\10\u012b\1\u015f\45\u012b\1\u015f\17\u012b\16\0"+
    "\1\u0160\140\0\1\u0161\37\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\1\u0162\1\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\10\10\1\u0163\7\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\u0164\10\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\1\10\1\u0165"+
    "\4\0\11\10\1\0\2\10\6\0\20\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\1\u0166\1\10\4\0"+
    "\11\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\6\10\1\u0167\11\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\1\u0168\17\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\15\10\1\u0169\2\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\12\10\1\u016a\5\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\20\10\1\u016b\2\10\20\0\3\10\2\0\1\10"+
    "\5\0\2\10\4\0\11\10\1\0\2\10\6\0\1\u016c"+
    "\17\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\11\10\1\0\2\10\6\0\4\10\1\u016d"+
    "\13\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\2\10\4\0\1\10\1\u016e\7\10\1\0\2\10\6\0"+
    "\20\10\1\0\2\10\20\0\3\10\2\0\1\10\5\0"+
    "\1\u016f\1\10\4\0\11\10\1\0\2\10\6\0\20\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\u0170\10\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\1\u0171\10\10\1\0\2\10\6\0\20\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\10\10\1\u0172\7\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\13\10\1\u0173\4\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\12\10\1\u0174\5\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\1\u0175\17\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\1\u0176\1\10\4\0\11\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\1\112\1\u0177\7\112"+
    "\1\0\2\112\6\0\20\112\1\0\2\112\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\1\112"+
    "\1\u0178\6\0\20\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\1\u0179\10\112\1\0\2\112"+
    "\6\0\20\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\14\112"+
    "\1\u017a\3\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\16\112"+
    "\1\u017b\1\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\2\112"+
    "\1\u017c\15\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\4\112"+
    "\1\u017d\13\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\6\112"+
    "\1\u017e\11\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\1\u017f\1\112\4\0\11\112\1\0\2\112\6\0"+
    "\20\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\20\112\1\0"+
    "\1\u0180\1\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\13\112\1\u0181\4\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\1\u0182\10\112\1\0\2\112\6\0\20\112\1\0"+
    "\2\112\20\0\1\112\1\u0183\1\112\2\0\1\112\5\0"+
    "\2\112\4\0\11\112\1\0\2\112\6\0\20\112\1\0"+
    "\2\112\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\1\u0184\10\112\1\0\2\112\6\0\20\112\1\0\2\112"+
    "\20\0\3\112\2\0\1\112\5\0\2\112\4\0\1\112"+
    "\1\u0185\7\112\1\0\2\112\6\0\20\112\1\0\2\112"+
    "\16\0\6\u015f\1\0\13\u015f\1\u0186\62\u015f\17\0\1\u0187"+
    "\71\0\3\10\2\0\1\10\5\0\2\10\4\0\1\u0188"+
    "\10\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\4\10\1\u0189\13\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\14\10\1\u018a\3\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\2\10\1\u018b"+
    "\6\10\1\0\2\10\6\0\20\10\1\0\2\10\103\0"+
    "\1\u016b\22\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\12\10\1\u018c\5\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\10\10\1\u018d\7\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\12\10\1\u018e\5\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\2\10\4\0"+
    "\11\10\1\0\2\10\6\0\6\10\1\u018f\11\10\1\0"+
    "\2\10\20\0\3\10\2\0\1\10\5\0\1\10\1\u0190"+
    "\4\0\11\10\1\0\2\10\6\0\20\10\1\0\2\10"+
    "\20\0\3\10\2\0\1\10\5\0\2\10\4\0\1\u0191"+
    "\10\10\1\0\2\10\6\0\20\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\1\u0192\10\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\7\10\1\u0193\10\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\6\10\1\u0194\11\10\1\0\2\10\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\2\112"+
    "\6\0\1\u0195\17\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\11\112\1\0\2\112\6\0"+
    "\3\112\1\u0196\14\112\1\0\2\112\20\0\3\112\2\0"+
    "\1\112\5\0\2\112\4\0\1\u0197\10\112\1\0\2\112"+
    "\6\0\20\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\7\112"+
    "\1\u0198\10\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\11\112"+
    "\1\u0199\6\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\3\112"+
    "\1\u019a\14\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\7\112"+
    "\1\u019b\10\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\12\112"+
    "\1\u019c\5\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\4\112"+
    "\1\u019d\13\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\3\112"+
    "\1\u019e\14\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\14\112"+
    "\1\u019f\3\112\1\0\2\112\35\0\1\u01a0\45\0\1\u01a0"+
    "\22\0\3\10\2\0\1\10\5\0\2\10\4\0\11\10"+
    "\1\0\2\10\6\0\1\u01a1\17\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\12\10\1\u01a2\5\10\1\0\2\10\20\0"+
    "\3\10\2\0\1\10\5\0\2\10\4\0\11\10\1\0"+
    "\2\10\6\0\1\u01a3\17\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\11\10\1\0\2\10"+
    "\6\0\10\10\1\u01a4\7\10\1\0\2\10\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\1\u01a5\10\10\1\0"+
    "\2\10\6\0\20\10\1\0\2\10\20\0\3\10\2\0"+
    "\1\10\5\0\2\10\4\0\1\u01a6\10\10\1\0\2\10"+
    "\6\0\20\10\1\0\2\10\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\7\112"+
    "\1\u01a7\10\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\11\112\1\0\2\112\6\0\13\112"+
    "\1\u01a8\4\112\1\0\2\112\20\0\3\112\2\0\1\112"+
    "\5\0\2\112\4\0\1\u01a9\10\112\1\0\2\112\6\0"+
    "\20\112\1\0\2\112\20\0\3\112\2\0\1\112\5\0"+
    "\1\u01aa\1\112\4\0\11\112\1\0\2\112\6\0\20\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\10\112\1\u01ab\7\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\11\112\1\u01ac\6\112"+
    "\1\0\2\112\20\0\3\112\2\0\1\112\5\0\2\112"+
    "\4\0\11\112\1\0\2\112\6\0\4\112\1\u01ad\13\112"+
    "\1\0\2\112\16\0\6\u0129\1\0\10\u0129\1\u01a0\45\u0129"+
    "\1\u01a0\17\u0129\3\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\11\10\1\0\2\10\6\0\10\10\1\u01ae\7\10"+
    "\1\0\2\10\20\0\3\10\2\0\1\10\5\0\2\10"+
    "\4\0\1\u01af\10\10\1\0\2\10\6\0\20\10\1\0"+
    "\2\10\20\0\3\112\2\0\1\112\5\0\2\112\4\0"+
    "\11\112\1\0\1\u01b0\1\112\6\0\20\112\1\0\2\112"+
    "\20\0\3\112\2\0\1\112\5\0\2\112\4\0\1\112"+
    "\1\u01b1\7\112\1\0\2\112\6\0\20\112\1\0\2\112"+
    "\20\0\3\112\2\0\1\112\5\0\2\112\4\0\1\u01b2"+
    "\10\112\1\0\2\112\6\0\20\112\1\0\2\112\20\0"+
    "\3\112\2\0\1\112\5\0\1\u01b3\1\112\4\0\11\112"+
    "\1\0\2\112\6\0\20\112\1\0\2\112\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\2\112"+
    "\6\0\6\112\1\u01b4\11\112\1\0\2\112\20\0\3\10"+
    "\2\0\1\10\5\0\2\10\4\0\2\10\1\u01b5\6\10"+
    "\1\0\2\10\6\0\20\10\1\0\2\10\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\2\112"+
    "\6\0\6\112\1\u01b6\11\112\1\0\2\112\20\0\3\112"+
    "\2\0\1\112\5\0\2\112\4\0\11\112\1\0\2\112"+
    "\6\0\6\112\1\u01b7\11\112\1\0\2\112\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\6\1\2\11\10\1\4\11"+
    "\14\1\4\11\1\1\1\11\1\1\1\11\10\1\1\11"+
    "\1\1\1\11\6\1\2\11\3\0\1\1\1\0\2\1"+
    "\2\11\2\0\6\1\1\11\7\1\1\0\1\11\1\0"+
    "\1\1\2\11\1\0\26\1\12\11\1\1\3\11\1\1"+
    "\1\11\1\1\2\0\1\11\22\1\4\0\15\1\1\0"+
    "\2\1\1\11\31\1\1\11\25\1\1\0\1\1\1\11"+
    "\2\0\1\11\1\0\71\1\1\11\1\0\4\1\1\0"+
    "\61\1\2\0\1\11\45\1\1\0\30\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _HaxeLexer() {
      this((java.io.Reader)null);
    }


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 119: 
          { return KSETTER;
          }
        case 136: break;
        case 41: 
          { return KIF ;
          }
        case 137: break;
        case 21: 
          { return OMINUS;
          }
        case 138: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return OCOMPLEMENT;
          }
        case 139: break;
        case 103: 
          { return KSWITCH ;
          }
        case 140: break;
        case 38: 
          { return MML_COMMENT;
          }
        case 141: break;
        case 26: 
          { return OBIT_AND;
          }
        case 142: break;
        case 24: 
          { return OQUEST;
          }
        case 143: break;
        case 5: 
          { return OQUOTIENT;
          }
        case 144: break;
        case 126: 
          { return KOVERRIDE;
          }
        case 145: break;
        case 82: 
          { return( KCAST );
          }
        case 146: break;
        case 135: 
          { return KPROTECTED;
          }
        case 147: break;
        case 55: 
          { return OCOND_OR;
          }
        case 148: break;
        case 92: 
          { return KTHROW ;
          }
        case 149: break;
        case 79: 
          { return KTRUE ;
          }
        case 150: break;
        case 3: 
          { return ID;
          }
        case 151: break;
        case 122: 
          { return KGETTER;
          }
        case 152: break;
        case 54: 
          { return OBIT_OR_ASSIGN;
          }
        case 153: break;
        case 39: 
          { return OQUOTIENT_ASSIGN;
          }
        case 154: break;
        case 59: 
          { return OSHIFT_LEFT;
          }
        case 155: break;
        case 100: 
          { return KIMPORT ;
          }
        case 156: break;
        case 78: 
          { return KNULL ;
          }
        case 157: break;
        case 112: 
          { return( KEXTENDS );
          }
        case 158: break;
        case 77: 
          { return( KENUM );
          }
        case 159: break;
        case 18: 
          { return PRBRACK;
          }
        case 160: break;
        case 50: 
          { return OARROW;
          }
        case 161: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 162: break;
        case 17: 
          { return PLBRACK;
          }
        case 163: break;
        case 94: 
          { return KCATCH;
          }
        case 164: break;
        case 63: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 165: break;
        case 101: 
          { return KINLINE;
          }
        case 166: break;
        case 131: 
          { return KCOREAPI;
          }
        case 167: break;
        case 118: 
          { return( KPACKAGE );
          }
        case 168: break;
        case 104: 
          { return KSTATIC;
          }
        case 169: break;
        case 80: 
          { return KTHIS ;
          }
        case 170: break;
        case 133: 
          { return( KIMPLEMENTS );
          }
        case 171: break;
        case 98: 
          { return KHACK;
          }
        case 172: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 173: break;
        case 36: 
          { return MACRO_ID;
          }
        case 174: break;
        case 129: 
          { return( KINTERFACE );
          }
        case 175: break;
        case 47: 
          { return OPLUS_ASSIGN;
          }
        case 176: break;
        case 68: 
          { return REG_EXP;
          }
        case 177: break;
        case 28: 
          { return OBIT_XOR;
          }
        case 178: break;
        case 46: 
          { return OPLUS_PLUS;
          }
        case 179: break;
        case 127: 
          { return KNODEBUG;
          }
        case 180: break;
        case 102: 
          { return KEXTERN;
          }
        case 181: break;
        case 61: 
          { return OREMAINDER_ASSIGN;
          }
        case 182: break;
        case 86: 
          { return KFALSE ;
          }
        case 183: break;
        case 110: 
          { return KBUILD;
          }
        case 184: break;
        case 44: 
          { return LITOCT;
          }
        case 185: break;
        case 4: 
          { return OCOLON;
          }
        case 186: break;
        case 73: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 187: break;
        case 85: 
          { return PPELSE;
          }
        case 188: break;
        case 58: 
          { return OLESS_OR_EQUAL;
          }
        case 189: break;
        case 72: 
          { return KVAR;
          }
        case 190: break;
        case 37: 
          { return MSL_COMMENT;
          }
        case 191: break;
        case 96: 
          { return KBIND;
          }
        case 192: break;
        case 84: 
          { return CONDITIONAL_STATEMENT_ID;
          }
        case 193: break;
        case 12: 
          { return ODOT;
          }
        case 194: break;
        case 51: 
          { return OMINUS_ASSIGN;
          }
        case 195: break;
        case 124: 
          { return( KABSTRACT );
          }
        case 196: break;
        case 108: 
          { return KFINAL;
          }
        case 197: break;
        case 75: 
          { return PPEND;
          }
        case 198: break;
        case 27: 
          { return OLESS;
          }
        case 199: break;
        case 67: 
          { return LITHEX;
          }
        case 200: break;
        case 64: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return LITFLOAT;
          }
        case 201: break;
        case 106: 
          { return KRETURN ;
          }
        case 202: break;
        case 9: 
          { return PRPAREN;
          }
        case 203: break;
        case 35: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return LONG_TEMPLATE_ENTRY_END;
                                              }
                                              lBraceCount--;
                                              return PRCURLY;
          }
        case 204: break;
        case 70: 
          { return ONEW;
          }
        case 205: break;
        case 49: 
          { return OMINUS_MINUS;
          }
        case 206: break;
        case 8: 
          { return PLPAREN;
          }
        case 207: break;
        case 134: 
          { return KAUTOBUILD;
          }
        case 208: break;
        case 107: 
          { return KPUBLIC;
          }
        case 209: break;
        case 33: 
          { popState(); return ID;
          }
        case 210: break;
        case 95: 
          { return KMETA;
          }
        case 211: break;
        case 66: 
          { return KFOR ;
          }
        case 212: break;
        case 25: 
          { return OBIT_OR;
          }
        case 213: break;
        case 105: 
          { return KMACRO2;
          }
        case 214: break;
        case 120: 
          { return KNATIVE;
          }
        case 215: break;
        case 114: 
          { return KDYNAMIC;
          }
        case 216: break;
        case 113: 
          { return( KDEFAULT );
          }
        case 217: break;
        case 22: 
          { return OGREATER;
          }
        case 218: break;
        case 88: 
          { return KNEVER;
          }
        case 219: break;
        case 20: 
          { return OCOMMA;
          }
        case 220: break;
        case 123: 
          { return( KFUNCTION );
          }
        case 221: break;
        case 87: 
          { return KSUPER ;
          }
        case 222: break;
        case 32: 
          { popState(); return CLOSING_QUOTE;
          }
        case 223: break;
        case 53: 
          { return OEQ;
          }
        case 224: break;
        case 48: 
          { return KDO ;
          }
        case 225: break;
        case 132: 
          { return KOVERLOAD;
          }
        case 226: break;
        case 128: 
          { return KREQUIRE;
          }
        case 227: break;
        case 117: 
          { return KPRIVATE;
          }
        case 228: break;
        case 7: 
          { return ONOT;
          }
        case 229: break;
        case 16: 
          { return PRCURLY;
          }
        case 230: break;
        case 71: 
          { return KTRY;
          }
        case 231: break;
        case 30: 
          { return REGULAR_STRING_PART;
          }
        case 232: break;
        case 83: 
          { popState(); return KTHIS;
          }
        case 233: break;
        case 81: 
          { return( KCASE );
          }
        case 234: break;
        case 15: 
          { return PLCURLY;
          }
        case 235: break;
        case 93: 
          { return( KCLASS );
          }
        case 236: break;
        case 109: 
          { return KMACRO;
          }
        case 237: break;
        case 111: 
          { return KDEBUG;
          }
        case 238: break;
        case 23: 
          { return OASSIGN;
          }
        case 239: break;
        case 6: 
          { return OMUL;
          }
        case 240: break;
        case 57: 
          { return OCOND_AND;
          }
        case 241: break;
        case 91: 
          { return KUSING ;
          }
        case 242: break;
        case 43: 
          { return ONOT_EQ;
          }
        case 243: break;
        case 13: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 244: break;
        case 130: 
          { return KFAKEENUM;
          }
        case 245: break;
        case 89: 
          { return KWHILE ;
          }
        case 246: break;
        case 56: 
          { return OBIT_AND_ASSIGN;
          }
        case 247: break;
        case 11: 
          { return OPLUS;
          }
        case 248: break;
        case 34: 
          { lBraceCount++; return PLCURLY;
          }
        case 249: break;
        case 76: 
          { return KELSE ;
          }
        case 250: break;
        case 31: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 251: break;
        case 10: 
          { return LITINT;
          }
        case 252: break;
        case 65: 
          { return DOC_COMMENT;
          }
        case 253: break;
        case 125: 
          { return KCONTINUE ;
          }
        case 254: break;
        case 74: 
          { return KNS;
          }
        case 255: break;
        case 121: 
          { return KBITMAP;
          }
        case 256: break;
        case 115: 
          { return KUNTYPED;
          }
        case 257: break;
        case 52: 
          { return OFAT_ARROW;
          }
        case 258: break;
        case 97: 
          { return KKEEP;
          }
        case 259: break;
        case 90: 
          { return( KBREAK );
          }
        case 260: break;
        case 19: 
          { return OSEMI;
          }
        case 261: break;
        case 29: 
          { return OREMAINDER;
          }
        case 262: break;
        case 40: 
          { return OMUL_ASSIGN;
          }
        case 263: break;
        case 42: 
          { return OIN;
          }
        case 264: break;
        case 14: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 265: break;
        case 116: 
          { return KTYPEDEF;
          }
        case 266: break;
        case 99: 
          { return PPERROR;
          }
        case 267: break;
        case 60: 
          { return OBIT_XOR_ASSIGN;
          }
        case 268: break;
        case 62: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 269: break;
        case 69: 
          { return OTRIPLE_DOT;
          }
        case 270: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
