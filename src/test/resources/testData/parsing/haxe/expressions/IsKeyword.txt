Haxe File
  PACKAGE_STATEMENT
    HaxePsiToken:package('package')
    HaxePsiToken:;(';')
  TYPEDEF_DECLARATION
    HaxePsiToken:typedef('typedef')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Point')
    GENERIC_PARAM
      HaxePsiToken:<('<')
      GENERIC_LIST_PART
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('T')
      HaxePsiToken:>('>')
    HaxePsiToken:=('=')
    TYPE_OR_ANONYMOUS
      ANONYMOUS_TYPE
        ANONYMOUS_TYPE_BODY
          HaxePsiToken:{('{')
          ANONYMOUS_TYPE_FIELD_LIST
            ANONYMOUS_TYPE_FIELD
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('x')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('T')
            HaxePsiToken:,(',')
            ANONYMOUS_TYPE_FIELD
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('y')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('T')
          HaxePsiToken:}('}')
    HaxePsiToken:;(';')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('IsOperator')
    CLASS_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        METHOD_MODIFIER
          HaxePsiToken:static('static')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('main')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('myString')
              VAR_INIT
                HaxePsiToken:=('=')
                STRING_LITERAL_EXPRESSION
                  HaxePsiToken:OPEN_QUOTE('"')
                  HaxePsiToken:REGULAR_STRING_PART('testString')
                  HaxePsiToken:CLOSING_QUOTE('"')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('priorityTest')
              VAR_INIT
                HaxePsiToken:=('=')
                BITWISE_EXPRESSION
                  ADDITIVE_EXPRESSION
                    ADDITIVE_EXPRESSION
                      LITERAL_EXPRESSION
                        HaxePsiToken:LITINT('2')
                      HaxePsiToken:+('+')
                      MULTIPLICATIVE_EXPRESSION
                        LITERAL_EXPRESSION
                          HaxePsiToken:LITINT('2')
                        HaxePsiToken:*('*')
                        LITERAL_EXPRESSION
                          HaxePsiToken:LITINT('2')
                    HaxePsiToken:+('+')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('2')
                  BIT_OPERATION
                    HaxePsiToken:&('&')
                  PREFIX_EXPRESSION
                    HaxePsiToken:~('~')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITHEX('0x001')
            HaxePsiToken:;(';')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('associativityTest')
              VAR_INIT
                HaxePsiToken:=('=')
                ADDITIVE_EXPRESSION
                  STRING_LITERAL_EXPRESSION
                    HaxePsiToken:OPEN_QUOTE('"')
                    HaxePsiToken:REGULAR_STRING_PART('test')
                    HaxePsiToken:CLOSING_QUOTE('"')
                  HaxePsiToken:+('+')
                  IS_TYPE_EXPRESSION
                    STRING_LITERAL_EXPRESSION
                      HaxePsiToken:OPEN_QUOTE('"')
                      HaxePsiToken:REGULAR_STRING_PART('this')
                      HaxePsiToken:CLOSING_QUOTE('"')
                    IS_OPERATOR
                      HaxePsiToken:ID('is')
                    TYPE_OR_ANONYMOUS
                      TYPE
                        REFERENCE_EXPRESSION
                          IDENTIFIER
                            HaxePsiToken:ID('String')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// Allowed in 4.0. 'Missing `;`' in 3.x')
          IF_STATEMENT
            GUARD
              HaxePsiToken:if('if')
              HaxePsiToken:(('(')
              IS_TYPE_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('myString')
                IS_OPERATOR
                  HaxePsiToken:ID('is')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('String')
              HaxePsiToken:)(')')
            GUARDED_STATEMENT
              BLOCK_STATEMENT
                HaxePsiToken:{('{')
                HaxePsiToken:}('}')
          PsiComment(MSL_COMMENT)('// Allowed in 4.2. Syntax error in 4.1: 'characters 22-24 : Expected )'')
          PsiComment(MSL_COMMENT)('// 3.4: 'Unexpected `is`', 'Missing `;`', and 'Unexpected )'')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('singleExpression')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    TYPE
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('String')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// allowed in 4.1, 4.2, syntax error in 4.0.5, 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('singleExpression2')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    TYPE
                      REFERENCE_EXPRESSION
                        REFERENCE_EXPRESSION
                          IDENTIFIER
                            HaxePsiToken:ID('String')
                        HaxePsiToken:.('.')
                        IDENTIFIER
                          HaxePsiToken:ID('String')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// allowed in 4.2- qualified package name, syntax error in 4.1. 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('mulitExpression')
              VAR_INIT
                HaxePsiToken:=('=')
                PARENTHESIZED_EXPRESSION
                  HaxePsiToken:(('(')
                  IS_TYPE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('myString')
                    IS_OPERATOR
                      HaxePsiToken:ID('is')
                    TYPE_OR_ANONYMOUS
                      TYPE
                        REFERENCE_EXPRESSION
                          IDENTIFIER
                            HaxePsiToken:ID('String')
                  HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// allowed')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('mulitExpression2')
              VAR_INIT
                HaxePsiToken:=('=')
                LOGIC_AND_EXPRESSION
                  PARENTHESIZED_EXPRESSION
                    HaxePsiToken:(('(')
                    IS_TYPE_EXPRESSION
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myString')
                      IS_OPERATOR
                        HaxePsiToken:ID('is')
                      TYPE_OR_ANONYMOUS
                        TYPE
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('String')
                    HaxePsiToken:)(')')
                  HaxePsiToken:&&('&&')
                  LITERAL_EXPRESSION
                    HaxePsiToken:false('false')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// allowed since it has parentheses')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('multiExpression3')
              VAR_INIT
                HaxePsiToken:=('=')
                LOGIC_AND_EXPRESSION
                  IS_TYPE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('myString')
                    IS_OPERATOR
                      HaxePsiToken:ID('is')
                    TYPE_OR_ANONYMOUS
                      TYPE
                        REFERENCE_EXPRESSION
                          IDENTIFIER
                            HaxePsiToken:ID('String')
                  HaxePsiToken:&&('&&')
                  LITERAL_EXPRESSION
                    HaxePsiToken:false('false')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// must be wrapped with parentheses in 4.1, allowed in 4.2. 'Missing ;' in 3.4.')
          PsiComment(MSL_COMMENT)('// Incorrect uses')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    THIS_EXPRESSION
                      HaxePsiToken:this('this')
                    HaxePsiToken:.('.')
                    IDENTIFIER
                      HaxePsiToken:ID('stage')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  LITERAL_EXPRESSION
                    HaxePsiToken:LITINT('123')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('//  incorrect use, Expected Type/Class got literal 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse2')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    THIS_EXPRESSION
                      HaxePsiToken:this('this')
                    HaxePsiToken:.('.')
                    IDENTIFIER
                      HaxePsiToken:ID('stage')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    TYPE
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('myString')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('//  incorrect use, Expected Type/Class got variable. 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse3')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  OBJECT_LITERAL
                    HaxePsiToken:{('{')
                    OBJECT_LITERAL_ELEMENT
                      IDENTIFIER
                        HaxePsiToken:ID('x')
                      HaxePsiToken::(':')
                      LITERAL_EXPRESSION
                        HaxePsiToken:LITINT('1')
                    HaxePsiToken:,(',')
                    OBJECT_LITERAL_ELEMENT
                      IDENTIFIER
                        HaxePsiToken:ID('y')
                      HaxePsiToken::(':')
                      LITERAL_EXPRESSION
                        HaxePsiToken:LITINT('1')
                    HaxePsiToken:}('}')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// Syntax error: 'Unexpected `1`.' 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse4')
              VAR_INIT
                HaxePsiToken:=('=')
                LOGIC_OR_EXPRESSION
                  IS_TYPE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('myString')
                    IS_OPERATOR
                      HaxePsiToken:ID('is')
                    TYPE_OR_ANONYMOUS
                      ANONYMOUS_TYPE
                        ANONYMOUS_TYPE_BODY
                          HaxePsiToken:{('{')
                          ANONYMOUS_TYPE_FIELD_LIST
                            ANONYMOUS_TYPE_FIELD
                              COMPONENT_NAME
                                IDENTIFIER
                                  HaxePsiToken:ID('x')
                              TYPE_TAG
                                HaxePsiToken::(':')
                                TYPE_OR_ANONYMOUS
                                  TYPE
                                    REFERENCE_EXPRESSION
                                      IDENTIFIER
                                        HaxePsiToken:ID('Int')
                            HaxePsiToken:,(',')
                            ANONYMOUS_TYPE_FIELD
                              COMPONENT_NAME
                                IDENTIFIER
                                  HaxePsiToken:ID('y')
                              TYPE_TAG
                                HaxePsiToken::(':')
                                TYPE_OR_ANONYMOUS
                                  TYPE
                                    REFERENCE_EXPRESSION
                                      IDENTIFIER
                                        HaxePsiToken:ID('Int')
                          HaxePsiToken:}('}')
                  HaxePsiToken:||('||')
                  CALL_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('call')
                    HaxePsiToken:(('(')
                    HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 'Unsupported type for `is` operator.' 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse5')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    TYPE
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('Point')
                      TYPE_PARAM
                        HaxePsiToken:<('<')
                        TYPE_LIST
                          TYPE_LIST_PART
                            TYPE_OR_ANONYMOUS
                              TYPE
                                REFERENCE_EXPRESSION
                                  IDENTIFIER
                                    HaxePsiToken:ID('Int')
                        HaxePsiToken:>('>')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// 'Type parameters are not supported for the `is` operator.' 'Missing ;' in 3.4.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse6')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    ANONYMOUS_TYPE
                      ANONYMOUS_TYPE_BODY
                        HaxePsiToken:{('{')
                        FIELD_DECLARATION
                          MUTABILITY_MODIFIER
                            HaxePsiToken:var('var')
                          COMPONENT_NAME
                            IDENTIFIER
                              HaxePsiToken:ID('x')
                          TYPE_TAG
                            HaxePsiToken::(':')
                            TYPE_OR_ANONYMOUS
                              TYPE
                                REFERENCE_EXPRESSION
                                  IDENTIFIER
                                    HaxePsiToken:ID('Int')
                          HaxePsiToken:;(';')
                        FIELD_DECLARATION
                          MUTABILITY_MODIFIER
                            HaxePsiToken:var('var')
                          COMPONENT_NAME
                            IDENTIFIER
                              HaxePsiToken:ID('y')
                          TYPE_TAG
                            HaxePsiToken::(':')
                            TYPE_OR_ANONYMOUS
                              TYPE
                                REFERENCE_EXPRESSION
                                  IDENTIFIER
                                    HaxePsiToken:ID('Int')
                          HaxePsiToken:;(';')
                        HaxePsiToken:}('}')
          PsiComment(MSL_COMMENT)('// 'Unsupported type for `is` operator.'')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('incorrectUse7')
              VAR_INIT
                HaxePsiToken:=('=')
                IS_TYPE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('myString')
                  IS_OPERATOR
                    HaxePsiToken:ID('is')
                  TYPE_OR_ANONYMOUS
                    ANONYMOUS_TYPE
                      ANONYMOUS_TYPE_BODY
                        HaxePsiToken:{('{')
                        METHOD_DECLARATION
                          HaxePsiToken:function('function')
                          COMPONENT_NAME
                            IDENTIFIER
                              HaxePsiToken:ID('iterator')
                          HaxePsiToken:(('(')
                          PARAMETER_LIST
                            <empty list>
                          HaxePsiToken:)(')')
                          BLOCK_STATEMENT
                            HaxePsiToken:{('{')
                            HaxePsiToken:}('}')
                        HaxePsiToken:}('}')
          PsiComment(MSL_COMMENT)('// 'Unsupported type for `is` operator.'')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')