Haxe File
  PACKAGE_STATEMENT
    HaxePsiToken:package('package')
    HaxePsiToken:;(';')
  IMPORT_STATEMENT
    HaxePsiToken:import('import')
    REFERENCE_EXPRESSION
      REFERENCE_EXPRESSION
        IDENTIFIER
          HaxePsiToken:ID('haxe')
      HaxePsiToken:.('.')
      IDENTIFIER
        HaxePsiToken:ID('Timer')
    HaxePsiToken:;(';')
  PsiComment(MSL_COMMENT)('// This tests http:github.com/haxefoundation/intellij-haxe/issues/544')
  PsiComment(MSL_COMMENT)('// which was the inability to parse a function call immediately after an anonymous')
  PsiComment(MSL_COMMENT)('// function was defined.')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('TestIssue544')
    CLASS_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        METHOD_MODIFIER
          HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:new('new')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          PsiComment(MSL_COMMENT)('// Error markers used to appear here ------------------------------------------------+')
          PsiComment(MSL_COMMENT)('//                          and here ---------------------------------------------+  |')
          PsiComment(MSL_COMMENT)('//                                                                                v  v')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('a')
              VAR_INIT
                HaxePsiToken:=('=')
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('Timer')
                    HaxePsiToken:.('.')
                    IDENTIFIER
                      HaxePsiToken:ID('delay')
                  HaxePsiToken:(('(')
                  EXPRESSION_LIST
                    CALL_EXPRESSION
                      FUNCTION_LITERAL
                        HaxePsiToken:function('function')
                        HaxePsiToken:(('(')
                        PARAMETER_LIST
                          PARAMETER
                            COMPONENT_NAME
                              IDENTIFIER
                                HaxePsiToken:ID('c')
                        HaxePsiToken:)(')')
                        BLOCK_STATEMENT
                          HaxePsiToken:{('{')
                          RETURN_STATEMENT
                            HaxePsiToken:return('return')
                            PARENTHESIZED_EXPRESSION
                              HaxePsiToken:(('(')
                              FUNCTION_LITERAL
                                HaxePsiToken:function('function')
                                HaxePsiToken:(('(')
                                PARAMETER_LIST
                                  <empty list>
                                HaxePsiToken:)(')')
                                BLOCK_STATEMENT
                                  HaxePsiToken:{('{')
                                  CALL_EXPRESSION
                                    REFERENCE_EXPRESSION
                                      IDENTIFIER
                                        HaxePsiToken:ID('trace')
                                    HaxePsiToken:(('(')
                                    EXPRESSION_LIST
                                      STRING_LITERAL_EXPRESSION
                                        HaxePsiToken:OPEN_QUOTE('"')
                                        HaxePsiToken:REGULAR_STRING_PART('Haxe is great!')
                                        HaxePsiToken:CLOSING_QUOTE('"')
                                      HaxePsiToken:,(',')
                                      REFERENCE_EXPRESSION
                                        IDENTIFIER
                                          HaxePsiToken:ID('c')
                                    HaxePsiToken:)(')')
                                  HaxePsiToken:;(';')
                                  HaxePsiToken:}('}')
                              HaxePsiToken:)(')')
                            HaxePsiToken:;(';')
                          HaxePsiToken:}('}')
                      HaxePsiToken:(('(')
                      EXPRESSION_LIST
                        LITERAL_EXPRESSION
                          HaxePsiToken:LITINT('3')
                      HaxePsiToken:)(')')
                    HaxePsiToken:,(',')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('1000')
                  HaxePsiToken:)(')')
            HaxePsiToken:;(';')
          PsiComment(MSL_COMMENT)('// This should parse cleanly and not be in a dummy block.')
          LOCAL_VAR_DECLARATION_LIST
            MUTABILITY_MODIFIER
              HaxePsiToken:var('var')
            LOCAL_VAR_DECLARATION
              COMPONENT_NAME
                IDENTIFIER
                  HaxePsiToken:ID('v')
              TYPE_TAG
                HaxePsiToken::(':')
                TYPE_OR_ANONYMOUS
                  TYPE
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('Array')
                    TYPE_PARAM
                      HaxePsiToken:<('<')
                      TYPE_LIST
                        TYPE_LIST_PART
                          TYPE_OR_ANONYMOUS
                            TYPE
                              REFERENCE_EXPRESSION
                                IDENTIFIER
                                  HaxePsiToken:ID('String')
                      HaxePsiToken:>('>')
              VAR_INIT
                HaxePsiToken:=('=')
                OBJECT_LITERAL
                  HaxePsiToken:{('{')
                  HaxePsiToken:}('}')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')