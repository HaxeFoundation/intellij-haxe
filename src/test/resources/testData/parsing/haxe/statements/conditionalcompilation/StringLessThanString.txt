Haxe File
  PACKAGE_STATEMENT
    HaxePsiToken:package('package')
    HaxePsiToken:;(';')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Test')
    CLASS_BODY
      HaxePsiToken:{('{')
      PsiComment(#if)('#if')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('(')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)('this')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('<')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)('that')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)(')')
      PsiComment(PPBODY)('\n ')
      PsiComment(PPBODY)('function')
      PsiComment(PPBODY)(' ')
      PsiComment(PPBODY)('bar')
      PsiComment(PPBODY)('(')
      PsiComment(PPBODY)(')')
      PsiComment(PPBODY)(' ')
      PsiComment(PPBODY)('{')
      PsiComment(PPBODY)('}')
      PsiComment(PPBODY)('\n ')
      PsiComment(#end)('#end')
      PsiComment(#if)('#if')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('(')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)('that')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('<')
      PsiComment(PPEXPRESSION)(' ')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)('this')
      PsiComment(PPEXPRESSION)('"')
      PsiComment(PPEXPRESSION)(')')
      METHOD_DECLARATION
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('baz')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
      PsiComment(#end)('#end')
      HaxePsiToken:}('}')