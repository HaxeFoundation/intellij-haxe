Haxe File
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('MultipleIfElse')
    CLASS_BODY
      HaxePsiToken:{('{')
      METHOD_DECLARATION
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('void')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          IF_STATEMENT
            GUARD
              HaxePsiToken:if('if')
              HaxePsiToken:(('(')
              COMPARE_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('v')
                COMPARE_OPERATION
                  HaxePsiToken:==('==')
                LITERAL_EXPRESSION
                  HaxePsiToken:LITINT('0')
              HaxePsiToken:)(')')
            GUARDED_STATEMENT
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('e1')
            ELSE_STATEMENT
              HaxePsiToken:else('else')
              IF_STATEMENT
                GUARD
                  HaxePsiToken:if('if')
                  HaxePsiToken:(('(')
                  COMPARE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('v')
                    COMPARE_OPERATION
                      HaxePsiToken:==('==')
                    CALL_EXPRESSION
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('foo')
                      HaxePsiToken:(('(')
                      EXPRESSION_LIST
                        LITERAL_EXPRESSION
                          HaxePsiToken:LITINT('1')
                      HaxePsiToken:)(')')
                  HaxePsiToken:)(')')
                GUARDED_STATEMENT
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('e2')
                ELSE_STATEMENT
                  HaxePsiToken:else('else')
                  IF_STATEMENT
                    GUARD
                      HaxePsiToken:if('if')
                      HaxePsiToken:(('(')
                      LOGIC_OR_EXPRESSION
                        COMPARE_EXPRESSION
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('v')
                          COMPARE_OPERATION
                            HaxePsiToken:==('==')
                          LITERAL_EXPRESSION
                            HaxePsiToken:LITINT('65')
                        HaxePsiToken:||('||')
                        COMPARE_EXPRESSION
                          REFERENCE_EXPRESSION
                            IDENTIFIER
                              HaxePsiToken:ID('v')
                          COMPARE_OPERATION
                            HaxePsiToken:==('==')
                          LITERAL_EXPRESSION
                            HaxePsiToken:LITINT('90')
                      HaxePsiToken:)(')')
                    GUARDED_STATEMENT
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('e3')
                    ELSE_STATEMENT
                      HaxePsiToken:else('else')
                      REFERENCE_EXPRESSION
                        IDENTIFIER
                          HaxePsiToken:ID('e4')
                    HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      HaxePsiToken:}('}')