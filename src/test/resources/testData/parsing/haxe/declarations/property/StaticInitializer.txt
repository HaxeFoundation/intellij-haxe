Haxe File
  PACKAGE_STATEMENT
    HaxePsiToken:package('package')
    HaxePsiToken:;(';')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('TestInit')
    CLASS_BODY
      HaxePsiToken:{('{')
      FIELD_DECLARATION
        FIELD_MODIFIER
          HaxePsiToken:private('private')
        FIELD_MODIFIER
          HaxePsiToken:static('static')
        MUTABILITY_MODIFIER
          HaxePsiToken:var('var')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('init')
        VAR_INIT
          HaxePsiToken:=('=')
          LITERAL_EXPRESSION
            BLOCK_STATEMENT
              HaxePsiToken:{('{')
              ASSIGN_EXPRESSION
                REFERENCE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('TestInit')
                  HaxePsiToken:.('.')
                  IDENTIFIER
                    HaxePsiToken:ID('FIRST')
                ASSIGN_OPERATION
                  HaxePsiToken:=('=')
                STRING_LITERAL_EXPRESSION
                  HaxePsiToken:OPEN_QUOTE('"')
                  HaxePsiToken:REGULAR_STRING_PART('#First!')
                  HaxePsiToken:CLOSING_QUOTE('"')
              HaxePsiToken:;(';')
              ASSIGN_EXPRESSION
                REFERENCE_EXPRESSION
                  REFERENCE_EXPRESSION
                    IDENTIFIER
                      HaxePsiToken:ID('TestInit')
                  HaxePsiToken:.('.')
                  IDENTIFIER
                    HaxePsiToken:ID('SECOND')
                ASSIGN_OPERATION
                  HaxePsiToken:=('=')
                STRING_LITERAL_EXPRESSION
                  HaxePsiToken:OPEN_QUOTE('"')
                  HaxePsiToken:REGULAR_STRING_PART('#Second.')
                  HaxePsiToken:CLOSING_QUOTE('"')
              HaxePsiToken:;(';')
              HaxePsiToken:}('}')
        HaxePsiToken:;(';')
      HaxePsiToken:}('}')