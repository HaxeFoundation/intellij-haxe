{
  parserClass="com.intellij.plugins.haxe.hxml.HXMLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="HXML"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.plugins.haxe.hxml.psi"
  psiImplPackage="com.intellij.plugins.haxe.hxml.psi.impl"

  elementTypeHolderClass="com.intellij.plugins.haxe.hxml.psi.HXMLTypes"
  elementTypeClass="com.intellij.plugins.haxe.buildsystem.hxml.psi.HXMLElementType"
  tokenTypeClass="com.intellij.plugins.haxe.buildsystem.hxml.psi.HXMLTokenType"

  generate=[names="short"]
}

simpleFile ::= line_* unterminated_line_?

hxml ::= HXML_FILE
private classname_ ::= qualifiedName

qualifiedName ::= QUALIFIEDCLASSNAME {methods=[getQName]}
option ::= KEY_TOKEN
value ::= VALUE_TOKEN | QUALIFIEDCLASSNAME
private eol_ ::= CRLF

private unterminated_line_ ::= (option_ | classname_ | hxml)   {recoverWhile="line_recovery"}
private line_ ::= unterminated_line_? eol_
private line_recovery ::= !(eol_)
private option_ ::= (lib | define | classpath | main | property | COMMENT)

property ::= option value? {pin=1}
define ::= ('-D'|'--define') value {pin=1}

lib ::= (libHx3|libHx4) value (':' value)? {pin=1}
private libHx3 ::= '-lib'
private libHx4 ::= '-L'|'--library'

classpath ::= (classpathHx3|classpathHx4) value {pin=1}
private classpathHx3 ::= '-cp'
private classpathHx4 ::= '-p'

main ::= (mainHx3| mainHx4) qualifiedName {pin=1}
private mainHx3 ::= '-main'
private mainHx4 ::= '-m'| '--main'
