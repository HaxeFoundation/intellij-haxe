/*
 * Copyright 2020 Eric Bishton
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
  http://haxe.org/manual/metadata
  http://haxe.org/manual/tips_and_tricks
*/


{
    parserClass="com.intellij.plugins.haxe.metadata.parser.HaxeMetadataParser"
    //parserUtilClass="com.intellij.plugins.haxe.lang.parser.HaxeGeneratedParserUtilBase"

    implements="com.intellij.plugins.haxe.lang.psi.HaxePsiCompositeElement"
    extends="com.intellij.plugins.haxe.lang.psi.impl.HaxePsiCompositeElementImpl"

    psiClassPrefix="HaxeMetadata"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.plugins.haxe.metadata.psi"
    psiImplPackage="com.intellij.plugins.haxe.metadata.psi.impl"

    elementTypeHolderClass="com.intellij.plugins.haxe.metadata.lexer.HaxeMetadataTokenTypes"
    elementTypeClass="com.intellij.plugins.haxe.metadata.lexer.HaxeMetadataElementType"
    tokenTypeClass="com.intellij.plugins.haxe.metadata.lexer.HaxeMetadataElementType"
    tokenTypeFactory="com.intellij.plugins.haxe.metadata.lexer.HaxeMetadataElementType.createToken"

    generateFirstCheck = 100

    tokens = [
      pLPAREN="("
      pRPAREN=")"
      oCOLON=":"
      oCOMMA=","
      oDOT="."
      oAT_SIGN="@"

      CT_META_PREFIX="@:"
      RT_META_PREFIX="@"

      // Bad characters
      INVALID_META_CHARACTER="INVALID_META_CHARACTER"

      // Extra data that is part of the embedded META, but shouldn't be.  (Used for debugging.)
      EXTRA_DATA="EXTRA_DATA"
    ]

    /* Name the various productions, to make cleaner error statements for the user. */
    name(".*Meta")="Metadata"
    pin(".*Meta")=1
    extends(".*Meta")="com.intellij.plugins.haxe.metadata.psi.impl.HaxeMetaImpl"
    implements(".*Meta")="com.intellij.plugins.haxe.metadata.psi.HaxeMeta"

    extends(".*")="com.intellij.plugins.haxe.lang.psi.impl.HaxePsiCompositeElementImpl"
    implements(".*")="com.intellij.plugins.haxe.lang.psi.HaxePsiCompositeElement"

    generate=[names="short"]
}

file ::= compileTimeMeta | runTimeMeta

compileTimeMeta ::= CT_META_PREFIX entry
runTimeMeta ::= RT_META_PREFIX entry

private entry ::= type (pLPAREN content? (pRPAREN | EOF))?
type ::= META_TYPE {name="Metadata type"}

private ctMetaArgs ::= CT_META_ARGS {name="Expression or expression list" elementType=content}
private rtMetaArgs ::= RT_META_ARGS {name="Constant, Array, or Object declaration" elementType=content}

// Old
private haxeCode ::= HAXE_CODE {name="Metadata value" elementType=content}
content ::= (haxeCode | ctMetaArgs | rtMetaArgs) {name="Metadata value"}