/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2023 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.plugins.haxe.HaxeLanguage;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.IFileElementType;
import com.intellij.psi.tree.TokenSet;

import static com.intellij.plugins.haxe.lang.lexer.HaxeTokenTypes.*;

public interface HaxeTokenTypeSets {


  IElementType CC_PASSIVE = new HaxeElementType("CC_PASSIVE");

  IFileElementType HAXE_FILE = new IFileElementType("HAXEFILE", HaxeLanguage.INSTANCE);

  IElementType LINE_COMMENT = new HaxeElementType("LINE_COMMENT");
  IElementType BLOCK_COMMENT = new HaxeElementType("BLOCK_COMMENT");
  IElementType DOC_COMMENT = new HaxeElementType("DOC_COMMENT");

  IElementType PPEXPRESSION = new HaxeElementType("PPEXPRESSION");
  IElementType PPBODY = new HaxeElementType("PPBODY");

  IElementType WSNLS = new HaxeElementType("WSNLS");

  IElementType SINGLE_QUOTE = new HaxeElementType("'");
  IElementType DOUBLE_QUOTE = new HaxeElementType("\"");

  TokenSet WHITESPACES = TokenSet.create(
    WSNLS,
    TokenType.WHITE_SPACE,
    TokenType.NEW_LINE_INDENT
  );

  TokenSet ONLY_COMMENTS = TokenSet.create(
    BLOCK_COMMENT,
    LINE_COMMENT,
    DOC_COMMENT
  );

  TokenSet COMMENTS = TokenSet.create(
    BLOCK_COMMENT,
    LINE_COMMENT,
    DOC_COMMENT,
    CONDITIONAL_COMPILATION_IF,
    CONDITIONAL_COMPILATION_END,
    CONDITIONAL_COMPILATION_ELSE,
    CONDITIONAL_COMPILATION_ELSEIF,
    CONDITIONAL_COMPILATION_ERROR,
    PPBODY,
    PPEXPRESSION
    //CONDITIONAL_STATEMENT_ID,
    //EMBEDDED_META
  );

  TokenSet ONLY_CC_DIRECTIVES = TokenSet.create(
    CONDITIONAL_COMPILATION_IF,
    CONDITIONAL_COMPILATION_END,
    CONDITIONAL_COMPILATION_ELSE,
    CONDITIONAL_COMPILATION_ELSEIF
  );

  TokenSet CONDITIONALLY_NOT_COMPILED = TokenSet.create(
    CONDITIONAL_COMPILATION_IF,
    CONDITIONAL_COMPILATION_END,
    CONDITIONAL_COMPILATION_ELSE,
    CONDITIONAL_COMPILATION_ELSEIF,
    CONDITIONAL_COMPILATION_ERROR,
    PPBODY,
    PPEXPRESSION
    //CONDITIONAL_STATEMENT_ID
  );

  TokenSet BAD_TOKENS = TokenSet.create(
    TokenType.BAD_CHARACTER
  );

  TokenSet STRINGS = TokenSet.create(
    OPEN_QUOTE,
    CLOSING_QUOTE,
    REGULAR_STRING_PART
  );

  TokenSet KEYWORD_CONSTANTS = TokenSet.create(
    KEYWORD_FALSE,
    KEYWORD_TRUE,
    KEYWORD_NULL
  );

  TokenSet SOFT_KEYWORDS = TokenSet.create(
    //TODO mlo:
    //KTO,
    //KFROM
  );

  TokenSet KEYWORDS = TokenSet.create(
    KEYWORD_BREAK,
    KEYWORD_CASE,
    KEYWORD_CAST,
    KEYWORD_CLASS,
    KEYWORD_ABSTRACT,
    KEYWORD_CONTINUE,
    KEYWORD_DEFAULT,
    KEYWORD_DO,
    KEYWORD_DYNAMIC,
    KEYWORD_ELSE,
    KEYWORD_ENUM,
    KEYWORD_EXTENDS,
    KEYWORD_FOR,
    KEYWORD_FUNCTION,
    KEYWORD_IF,
    KEYWORD_IMPLEMENTS,
    KEYWORD_IMPORT,
    KEYWORD_INLINE,
    KEYWORD_INTERFACE,
    KEYWORD_NULL,
    KEYWORD_OVERRIDE,
    KEYWORD_PACKAGE,
    KEYWORD_PRIVATE,
    KEYWORD_PUBLIC,
    KEYWORD_RETURN,
    KEYWORD_STATIC,
    KEYWORD_SWITCH,
    KEYWORD_THIS,
    KEYWORD_THROW,
    KEYWORD_UNTYPED,
    KEYWORD_VAR,
    KEYWORD_FINAL,
    KEYWORD_WHILE,
    KEYWORD_TRY,
    KEYWORD_CATCH,
    KEYWORD_TYPEDEF,
    CONDITIONAL_COMPILATION_ELSE,
    CONDITIONAL_COMPILATION_ELSEIF,
    CONDITIONAL_COMPILATION_END,
    CONDITIONAL_COMPILATION_ERROR,
    CONDITIONAL_COMPILATION_IF,
    KEYWORD_EXTERN,
    //KMACRO2,
    KEYWORD_USING,
    KEYWORD_SUPER,
    META_ID,
    //KFROM,
    //KTO,
    KEYWORD_NEVER,
    KEYWORD_NEW
  );

  TokenSet FUNCTION_DEFINITION = TokenSet.create(
    METHOD_DECLARATION,
    LOCAL_FUNCTION_DECLARATION,
    FUNCTION_LITERAL
  );

  TokenSet BINARY_EXPRESSIONS = TokenSet.create(
    LOGIC_OR_EXPRESSION,
    LOGIC_AND_EXPRESSION,
    COMPARE_EXPRESSION,
    SHIFT_EXPRESSION,
    ADDITIVE_EXPRESSION,
    MULTIPLICATIVE_EXPRESSION
  );

  TokenSet BINARY_OPERATORS = TokenSet.create(
    BIT_OPERATION,
    OPERATOR_COND_OR, OPERATOR_COND_AND,
    COMPARE_OPERATION,
    SHIFT_OPERATOR,
    OPERATOR_PLUS, OPERATOR_MINUS,
    OPERATOR_MUL, OPERATOR_QUOTIENT, OPERATOR_REMAINDER
  );

  TokenSet ASSIGN_OPERATORS = TokenSet.create(
    OPERATOR_ASSIGN,
    OPERATOR_PLUS_ASSIGN, OPERATOR_MINUS_ASSIGN, OPERATOR_BIT_OR_ASSIGN, OPERATOR_BIT_XOR_ASSIGN,
    OPERATOR_MUL_ASSIGN, OPERATOR_QUOTIENT_ASSIGN, OPERATOR_REMAINDER_ASSIGN,
    OPERATOR_SHIFT_LEFT_ASSIGN,
    OPERATOR_BIT_AND_ASSIGN,
    OPERATOR_SHIFT_RIGHT_ASSIGN,
    ASSIGN_OPERATION
  );

  TokenSet LOGIC_OPERATORS = TokenSet.create(
    OPERATOR_COND_OR, OPERATOR_COND_AND
  );

  TokenSet EQUALITY_OPERATORS = TokenSet.create(
    OPERATOR_EQ, OPERATOR_NOT_EQ
  );

  TokenSet RELATIONAL_OPERATORS = TokenSet.create(
    OPERATOR_LESS, OPERATOR_LESS_OR_EQUAL, OPERATOR_GREATER, OPERATOR_GREATER_OR_EQUAL
  );

  TokenSet ADDITIVE_OPERATORS = TokenSet.create(
    OPERATOR_PLUS, OPERATOR_MINUS
  );

  TokenSet MULTIPLICATIVE_OPERATORS = TokenSet.create(
    OPERATOR_MUL, OPERATOR_QUOTIENT, OPERATOR_REMAINDER
  );

  TokenSet UNARY_OPERATORS = TokenSet.create(
    OPERATOR_PLUS_PLUS, OPERATOR_MINUS_MINUS, OPERATOR_NOT, OPERATOR_MINUS, OPERATOR_COMPLEMENT
  );

  TokenSet UNARY_READ_WRITE_OPERATORS = TokenSet.create(
    OPERATOR_PLUS_PLUS, OPERATOR_MINUS_MINUS
  );

  TokenSet BITWISE_OPERATORS = TokenSet.create(
    OPERATOR_BIT_AND, OPERATOR_BIT_OR, OPERATOR_BIT_XOR,
    BIT_OPERATION
  );

  TokenSet SHIFT_OPERATORS = TokenSet.create(
    OPERATOR_SHIFT_LEFT,
    SHIFT_RIGHT_OPERATOR,
    UNSIGNED_SHIFT_RIGHT_OPERATOR,
    SHIFT_LEFT_OPERATOR
  );

  TokenSet OPERATORS = TokenSet.create(
    OPERATOR_TRIPLE_DOT,
    OPERATOR_EQ,
    OPERATOR_ASSIGN,
    OPERATOR_NOT_EQ,
    OPERATOR_NOT,
    OPERATOR_PLUS_PLUS,
    OPERATOR_PLUS_ASSIGN,
    OPERATOR_PLUS,
    OPERATOR_MINUS_MINUS,
    OPERATOR_MINUS_ASSIGN,
    OPERATOR_MINUS,
    OPERATOR_COND_OR,
    OPERATOR_BIT_OR_ASSIGN,
    OPERATOR_BIT_OR,
    OPERATOR_COND_AND,
    OPERATOR_BIT_AND_ASSIGN,
    OPERATOR_BIT_AND,
    OPERATOR_SHIFT_LEFT_ASSIGN,
    OPERATOR_SHIFT_LEFT,
    OPERATOR_LESS_OR_EQUAL,
    OPERATOR_LESS,
    OPERATOR_BIT_XOR_ASSIGN,
    OPERATOR_BIT_XOR,
    OPERATOR_MUL_ASSIGN,
    OPERATOR_MUL,
    OPERATOR_QUOTIENT_ASSIGN,
    OPERATOR_QUOTIENT,
    OPERATOR_REMAINDER_ASSIGN,
    OPERATOR_REMAINDER,
    OPERATOR_SHIFT_RIGHT_ASSIGN,
    OPERATOR_GREATER_OR_EQUAL,
    OPERATOR_GREATER
    //TODO mlo:
    //IS_OPERATOR
  );

  TokenSet CLASS_BODY_TYPES = TokenSet.create(
    ABSTRACT_BODY,
    ANONYMOUS_TYPE_BODY,
    CLASS_BODY,
    ENUM_BODY,
    EXTERN_CLASS_DECLARATION_BODY,
    INTERFACE_BODY
  );

  TokenSet CLASS_TYPES = TokenSet.create(
    ABSTRACT_CLASS_DECLARATION,
    CLASS_DECLARATION,
    ENUM_DECLARATION,
    EXTERN_CLASS_DECLARATION,
    INTERFACE_DECLARATION
  );
}

