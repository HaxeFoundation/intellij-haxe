/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2017 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'de.undercouch:gradle-download-task:3.3.0'
  }
}

//plugins {
//    id "de.undercouch.download" version "3.3.0"
//}
apply plugin: 'de.undercouch.download'

// Newer versions beyond 1.2.0 does not seem to work
def grammarKitVersion = "1.2.0"

def ideaVersion

def baseDir
def dependenciesDir

def ideaTargetDir
def ideaIUZipFile

def flexDownloadFile
def flexTargetFile

def grammarKitDownloadFile
def grammarKitTargetFile

def psiDownloadFile
def psiTargetFile

def testZZZ = "test zzz message"

Properties props = new Properties()
props.load(new FileInputStream("workspace.properties"))
props.each { prop -> project.ext.set(prop.key, prop.value) }

//project.ext.additionalProperties = new Properties().load(file("workspace.properties").newReader())

task initProperties(group: 'workspace') {
  if (!project.hasProperty('ideaVersion')) {
    ideaVersion = "2017.2.4"
    println '-------------------------------------------------------'
    println "No target version selected, using default ($ideaVersion)"
    println 'to specify build target use -PideaVersion=<version>'
    println 'Ex:'
    println 'gradlew buildPlugin -PideaVersion=14.1.1'
    println '-------------------------------------------------------'
  }
  else {
    ideaVersion = project.property('ideaVersion')
    println "Target set to IDEA ${ideaVersion}"
  }

  baseDir = "${file('.')}"
  dependenciesDir = "${baseDir}/dependencies"

  ideaTargetDir = "${baseDir}/idea-IU"
  ideaIUZipFile = "/ideaIU-${ideaVersion}.zip"

  flexDownloadFile = "idea-flex-${ideaVersion}.skeleton"
  flexTargetFile = "idea-flex.skeleton"

  grammarKitDownloadFile = "GrammarKit-${grammarKitVersion}.zip"
  grammarKitTargetFile = "grammar-kit.jar"

  psiDownloadFile = "light-psi-all-${grammarKitVersion}.jar"
  psiTargetFile = "light-psi-all.jar"
}


task downloadIdea(group: 'workspace', dependsOn: 'initProperties') {
  inputs.property('ideaVersion', ideaVersion)
  outputs.file("$dependenciesDir/$ideaIUZipFile")
  doLast {
    mkdir(dependenciesDir)
//  this repo should provide versions from 14.1 and up
    def url = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIU/${ideaVersion}/ideaIU-${ideaVersion}.zip"
    def code = new URL(url).openConnection().with {
      requestMethod = 'HEAD'
      connect()
      responseCode
    }
    if (code >= 400) {
      throw new GradleScriptException(" - IntelliJ ${ideaVersion} Ultimate not found." +
                                      "\nSee the following url for available versions" +
                                      "\nhttps://www.jetbrains.com/intellij-repository/releases", null)
    }
    download {
      src url
      dest "$dependenciesDir/$ideaIUZipFile"
      onlyIfNewer true
      overwrite true
    }
  }
}

task extractIdea(group: 'workspace', dependsOn: 'downloadIdea') {
  inputs.property('ideaVersion', ideaVersion)
  inputs.file("$dependenciesDir/$ideaIUZipFile")
  outputs.file("${ideaTargetDir}/build.txt")
  doLast {
    println "- Adding IDEA to workspace (this could take some time)"
    delete "${ideaTargetDir}"
    copy {
      from zipTree("$dependenciesDir/$ideaIUZipFile")
      into "${ideaTargetDir}"
    }
  }
}
task downloadFlex(group: 'workspace', dependsOn: 'extractIdea') {
  outputs.file("$flexDownloadFile")
  doLast {
    def url = getFlexUrl(file("${ideaTargetDir}/build.txt"))
    download {
      src url
      dest "$dependenciesDir/$flexDownloadFile"
      overwrite true
    }
  }
}
/*
 Due to inconsistent branch names in the IntelliJ repo we do some trial and error to find the URL to the flex skeleton file
 */

String getFlexUrl(File buildFile) {
//    println  "IDEA build number: " +buildFile.getText()
  def matcher = buildFile.getText() =~ /([^\d]+)-(\d+)(\.\d+)(\.\d+)/
  if (!matcher.matches()) {
    println "unable to determine build version number"
  }

  def shortBuildNumber = matcher.group(2)
  def longBuildNumber = matcher.group(2) + matcher.group(3)


  def url = "https://raw.githubusercontent.com/JetBrains/intellij-community/${longBuildNumber}/tools/lexer/idea-flex.skeleton"
  def code = new URL(url).openConnection().with {
    requestMethod = 'HEAD'
    connect()
    responseCode
  }
  if (code == 200) {
    return url
  }

  url = "https://raw.githubusercontent.com/JetBrains/intellij-community/${shortBuildNumber}/tools/lexer/idea-flex.skeleton"
  code = new URL(url).openConnection().with {
    requestMethod = 'HEAD'
    connect()
    responseCode
  }
  if (code == 200) {
    return url
  }
  return 'https://raw.githubusercontent.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
}

task copyFlex(group: 'workspace', dependsOn: 'downloadFlex') {
  inputs.file("$dependenciesDir/$flexDownloadFile")
  outputs.file("$baseDir/$flexTargetFile")
  doLast {
    copy {
      from "$dependenciesDir/$flexDownloadFile"
      into "$baseDir"
      rename { "$flexTargetFile" }
    }
  }
}

task downloadGrammarKit(group: 'workspace', dependsOn: 'copyFlex') {
  outputs.file("$dependenciesDir/$grammarKitDownloadFile")
  doLast {
    download {
      src "https://github.com/JetBrains/Grammar-Kit/releases/download/${grammarKitVersion}/GrammarKit.zip"
      dest "$dependenciesDir/$grammarKitDownloadFile"
      overwrite true
    }
  }
}
task extractGrammarKit(group: 'workspace', dependsOn: 'downloadGrammarKit') {
  outputs.file("$baseDir/$grammarKitTargetFile")
  doLast {
    copy {
      from zipTree("$dependenciesDir/$grammarKitDownloadFile").matching {
        include('GrammarKit/lib/grammar-kit.jar')
      }
      into "$baseDir"
      eachFile { f -> f.path = f.path.replaceFirst('GrammarKit/lib/', '') }
      includeEmptyDirs false
    }
  }
}
task downloadPsi(group: 'workspace') {
  outputs.file("$dependenciesDir/$psiDownloadFile")
  doLast {
    download {
      src "https://github.com/JetBrains/Grammar-Kit/releases/download/${grammarKitVersion}/light-psi-all.jar"
      dest "$dependenciesDir/$psiDownloadFile"
      overwrite true
    }
  }
}
task copyPsi(group: 'workspace', dependsOn: 'downloadPsi') {
  inputs.file("$dependenciesDir/$psiDownloadFile")
  outputs.file("$baseDir/$psiTargetFile")
  doLast {
    copy {
      from "$dependenciesDir/$psiDownloadFile"
      into "$baseDir"
      rename { "$psiTargetFile" }
    }
  }
}

task setUpWorkspace(group: 'workspace', dependsOn: [initProperties, copyFlex, extractGrammarKit, copyPsi]) {
}

task cleanWorkspace(group: 'workspace', dependsOn: initProperties) {
  doLast {
    println " - Cleaning workspace (this could take some time)"
    delete "$dependenciesDir"
    delete "$ideaTargetDir"
    delete "$baseDir/$psiTargetFile"
    delete "$baseDir/$grammarKitTargetFile"
    delete "$baseDir/$flexTargetFile"
  }
}

