/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class EReg extends haxe.lang.HxObject
{
	public EReg(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public EReg(String r, String opt)
	{
		//line 31 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		EReg.__hx_ctor__EReg(this, r, opt);
	}
	
	
	public static void __hx_ctor__EReg(EReg __hx_this, String r, String opt)
	{
		//line 32 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		int flags = 0;
		//line 33 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		{
			//line 33 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			int _g1 = 0;
			//line 33 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			int _g = opt.length();
			//line 33 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			while (( _g1 < _g ))
			{
				//line 33 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				int i = _g1++;
				//line 35 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				{
					//line 35 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					int _g2 = ( (( i < opt.length() )) ? (((int) (opt.charAt(i)) )) : (-1) );
					//line 35 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					switch (_g2)
					{
						case 103:
						{
							//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							__hx_this.isGlobal = true;
							//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							break;
						}
						
						
						case 105:
						{
							//line 38 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							flags |= java.util.regex.Pattern.CASE_INSENSITIVE;
							//line 38 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							break;
						}
						
						
						case 109:
						{
							//line 40 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							flags |= java.util.regex.Pattern.MULTILINE;
							//line 40 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							break;
						}
						
						
						case 115:
						{
							//line 42 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							flags |= java.util.regex.Pattern.DOTALL;
							//line 42 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
							break;
						}
						
						
					}
					
				}
				
			}
			
		}
		
		//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		__hx_this.matcher = java.util.regex.Pattern.compile(haxe.lang.Runtime.toString(EReg.convert(r)), ((int) (flags) )).matcher(((CharSequence) ("") ));
		//line 49 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		__hx_this.pattern = r;
	}
	
	
	public static String convert(String r)
	{
		//line 77 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		return r;
	}
	
	
	public String pattern;
	
	public java.util.regex.Matcher matcher;
	
	public String cur;
	
	public boolean isGlobal;
	
	public boolean match(String s)
	{
		//line 81 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		this.cur = s;
		//line 82 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		this.matcher = this.matcher.reset(((CharSequence) (s) ));
		//line 83 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		return this.matcher.find();
	}
	
	
	@Override public Object __hx_setField(String field, Object value, boolean handleProperties)
	{
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		{
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			boolean __temp_executeDef1 = true;
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			switch (field.hashCode())
			{
				case -568986259:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("isGlobal")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						this.isGlobal = haxe.lang.Runtime.toBool(value);
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return value;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case -791090288:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("pattern")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						this.pattern = haxe.lang.Runtime.toString(value);
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return value;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case 98880:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("cur")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						this.cur = haxe.lang.Runtime.toString(value);
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return value;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case 840862002:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("matcher")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						this.matcher = ((java.util.regex.Matcher) (value) );
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return value;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
			}
			
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			if (__temp_executeDef1) 
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public Object __hx_getField(String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		{
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			boolean __temp_executeDef1 = true;
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			switch (field.hashCode())
			{
				case 103668165:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("match")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "match")) );
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case -791090288:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("pattern")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return this.pattern;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case -568986259:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("isGlobal")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return this.isGlobal;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case 840862002:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("matcher")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return this.matcher;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
				case 98880:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("cur")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return this.cur;
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
			}
			
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			if (__temp_executeDef1) 
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public Object __hx_invokeField(String field, haxe.root.Array dynargs)
	{
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		{
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			boolean __temp_executeDef1 = true;
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			switch (field.hashCode())
			{
				case 103668165:
				{
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					if (field.equals("match")) 
					{
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						__temp_executeDef1 = false;
						//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
						return this.match(haxe.lang.Runtime.toString(dynargs.__get(0)));
					}
					
					//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
					break;
				}
				
				
			}
			
			//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
			if (__temp_executeDef1) 
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<String> baseArr)
	{
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		baseArr.push("isGlobal");
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		baseArr.push("cur");
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		baseArr.push("matcher");
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		baseArr.push("pattern");
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\EReg.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


