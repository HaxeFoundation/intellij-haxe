/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Type extends haxe.lang.HxObject
{
	public Type(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Type()
	{
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		Type.__hx_ctor__Type(this);
	}
	
	
	public static void __hx_ctor__Type(Type __hx_this)
	{
	}
	
	
	public static Class getEnum(Object o)
	{
		//line 51 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( o instanceof Enum ) || ( o instanceof haxe.lang.Enum ) ))
		{
			//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return o.getClass();
		}
		
		//line 54 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return null;
	}
	
	
	public static String getClassName(Class c)
	{
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		Class c1 = ((Class) (c) );
		//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		String name = c1.getName();
		//line 70 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("haxe.root.")) 
		{
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 72 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("java.lang")) 
		{
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			name = haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			String __temp_svar1 = (name);
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			boolean __temp_executeDef2 = true;
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			switch (__temp_hash3)
			{
				case -1325958191:
				case 2052876273:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == -1325958191 ) && __temp_svar1.equals("double") )) || __temp_svar1.equals("Double") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Float";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case -1939501217:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (__temp_svar1.equals("Object")) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 79 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Dynamic";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case 104431:
				case -672261858:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == 104431 ) && __temp_svar1.equals("int") )) || __temp_svar1.equals("Integer") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 77 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Int";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
			}
			
			//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (__temp_executeDef2) 
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return name;
			}
			else
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static String getEnumName(Class e)
	{
		//line 85 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		Class c = ((Class) (e) );
		//line 86 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		String ret = c.getName();
		//line 87 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (ret.startsWith("haxe.root.")) 
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(ret, 10, null);
		}
		else
		{
			//line 89 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( haxe.lang.Runtime.valEq(ret, "boolean") || haxe.lang.Runtime.valEq(ret, "java.lang.Boolean") )) 
			{
				//line 90 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return "Bool";
			}
			
		}
		
		//line 92 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ret;
	}
	
	
	public static Class resolveClass(String name)
	{
		//line 97 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( haxe.lang.StringExt.indexOf(name, ".", null) == -1 )) 
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				name = ( "haxe.root." + name );
			}
			
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((Class) (Class.forName(haxe.lang.Runtime.toString(name))) );
		}
		catch (ClassNotFoundException e)
		{
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			haxe.lang.Exceptions.setException(e);
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			{
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				String __temp_svar1 = (name);
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				boolean __temp_executeDef2 = true;
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				switch (__temp_svar1.hashCode())
				{
					case 360541844:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Class")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return Class.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1242153355:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.String")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 106 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return String.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -140489125:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Dynamic")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 109 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return Object.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 704654956:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Math")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return Math.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 363325304:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Float")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 105 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return double.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1778387957:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Int")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 104 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return int.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
				}
				
				//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				if (__temp_executeDef2) 
				{
					//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					return null;
				}
				else
				{
					//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					throw null;
				}
				
			}
			
		}
		
		
	}
	
	
	public static Class resolveEnum(String name)
	{
		
		if ("Bool".equals(name)) return boolean.class;
		Class r = resolveClass(name);
		if (r != null && (r.getSuperclass() == Enum.class || haxe.lang.Enum.class.isAssignableFrom(r)))
			return r;
		return null;
	
	}
	
	
	protected static final Class[] __createEmptyInstance_EMPTY_TYPES = ((Class[]) (new Class[]{((Class) (((Class) (haxe.lang.EmptyObject.class) )) )}) );
	
	protected static final haxe.lang.EmptyObject[] __createEmptyInstance_EMPTY_ARGS = ((haxe.lang.EmptyObject[]) (new haxe.lang.EmptyObject[]{((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) )}) );
	
	public static <T> T createEmptyInstance(Class cl)
	{
		//line 250 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 251 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			Class t = ((Class) (((Class) (cl) )) );
			//line 252 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			try 
			{
				//line 253 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.reflect.Constructor<T> ctor = ((java.lang.reflect.Constructor<T>) (((java.lang.reflect.Constructor) (t.getConstructor(((Class[]) (Type.__createEmptyInstance_EMPTY_TYPES) ))) )) );
				//line 254 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ctor.newInstance(((Object[]) (Type.__createEmptyInstance_EMPTY_ARGS) ));
			}
			catch (NoSuchMethodException _1)
			{
				//line 256 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				haxe.lang.Exceptions.setException(_1);
				//line 256 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ((T) (t.newInstance()) );
			}
			
			
		}
		catch (Throwable typedException)
		{
			//line 250 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public static <T> T createEnum(Class e, String constr, haxe.root.Array params)
	{
		
		if (params == null || params.length == 0)
		{
			Object ret = haxe.lang.Runtime.slowGetField(e, constr, true);
			if (ret instanceof haxe.lang.Function)
				throw haxe.lang.HaxeException.wrap("Constructor " + constr + " needs parameters");
			return (T) ret;
		} else {
			return (T) haxe.lang.Runtime.slowCallField(e, constr, params);
		}
	
	}
	
	
	public static haxe.root.Array<String> getClassFields(Class c)
	{
		
		Array<String> ret = new Array<String>();
		if (c == String.class)
		{
			ret.push("fromCharCode");
			return ret;
		}

		for (java.lang.reflect.Field f : c.getDeclaredFields())
		{
			String fname = f.getName();
			if (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith("__hx_"))
			ret.push(fname);
		}

		for (java.lang.reflect.Method m : c.getDeclaredMethods())
		{
			if (m.getDeclaringClass() == Object.class)
				continue;
			String mname = m.getName();
			if (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith("__hx_"))
				ret.push(mname);
		}

		return ret;
	
	}
	
	
	public static haxe.root.Array<String> getEnumConstructs(Class e)
	{
		//line 341 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (haxe.root.Reflect.hasField(e, "__hx_constructs")) 
		{
			//line 343 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			haxe.root.Array<String> ret = haxe.java.Lib.array_String(((String[]) (haxe.lang.Runtime.getField(e, "__hx_constructs", true)) ));
			//line 344 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ret.copy();
		}
		
		//line 346 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		Enum[] vals = ((Enum[]) (haxe.lang.Runtime.callField(e, "values", null)) );
		//line 346 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		haxe.root.Array<String> ret1 = new haxe.root.Array<String>(new String[]{});
		//line 347 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 347 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int _g1 = 0;
			//line 347 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int _g = vals.length;
			//line 347 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			while (( _g1 < _g ))
			{
				//line 347 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				int i = _g1++;
				//line 348 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				ret1.__set(i, vals[i].name());
			}
			
		}
		
		//line 349 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ret1;
	}
	
	
	public static haxe.root.ValueType typeof(Object v)
	{
		
		if (v == null) return ValueType.TNull;

		if (v instanceof haxe.lang.IHxObject) {
			haxe.lang.IHxObject vobj = (haxe.lang.IHxObject) v;
			Class cl = vobj.getClass();
			if (v instanceof haxe.lang.DynamicObject)
				return ValueType.TObject;
			else
				return ValueType.TClass(cl);
		} else if (v instanceof Number) {
			Number n = (Number) v;
			if (n.intValue() == n.doubleValue())
				return ValueType.TInt;
			else
				return ValueType.TFloat;
		} else if (v instanceof haxe.lang.Function) {
			return ValueType.TFunction;
		} else if (v instanceof Enum || v instanceof haxe.lang.Enum) {
			return ValueType.TEnum(v.getClass());
		} else if (v instanceof Boolean) {
			return ValueType.TBool;
		} else if (v instanceof Class) {
			return ValueType.TObject;
		} else {
			return ValueType.TClass(v.getClass());
		}
	
	}
	
	
	public static <T> boolean enumEq(T a, T b)
	{
		
			if (a instanceof haxe.lang.Enum)
				return a.equals(b);
			else
				return haxe.lang.Runtime.eq(a, b);
	
	}
	
	
	public static String enumConstructor(Object e)
	{
		
		if (e instanceof Enum)
			return ((Enum) e).name();
		else
			return ((haxe.lang.Enum) e).getTag();
	
	}
	
	
	public static haxe.root.Array enumParameters(Object e)
	{
		
		return ( e instanceof Enum ) ? new haxe.root.Array() : ((haxe.lang.Enum) e).getParams();
	
	}
	
	
	public static int enumIndex(Object e)
	{
		
		if (e instanceof Enum)
			return ((Enum) e).ordinal();
		else
			return ((haxe.lang.Enum) e).index;
	
	}
	
	
}


