/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package haxe.ds;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class IntMap<T> extends haxe.lang.HxObject implements haxe.IMap<Object, T>
{
	static
	{
		//line 36 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		IntMap.HASH_UPPER = 0.7;
	}
	
	public IntMap(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public IntMap()
	{
		//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		IntMap.__hx_ctor_haxe_ds_IntMap(((IntMap<T>) (this) ));
	}
	
	
	public static <T_c> void __hx_ctor_haxe_ds_IntMap(IntMap<T_c> __hx_this)
	{
		//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		__hx_this.cachedIndex = -1;
	}
	
	
	public static double HASH_UPPER;
	
	public static void _assert(boolean x)
	{
	}
	
	
	public static int defaultK()
	{
		//line 415 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return 0;
	}
	
	
	public static void arrayCopy(Object sourceArray, int sourceIndex, Object destinationArray, int destinationIndex, int length)
	{
		//line 418 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		System.arraycopy(((Object) (sourceArray) ), ((int) (sourceIndex) ), ((Object) (destinationArray) ), ((int) (destinationIndex) ), ((int) (length) ));
	}
	
	
	public static int getInc(int k, int mask)
	{
		//line 421 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( ( ( k >> 3 ) ^ ( k << 3 ) ) | 1 )) & mask );
	}
	
	
	public static int hash(int i)
	{
		//line 424 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return i;
	}
	
	
	public static boolean flagIsEmpty(int[] flag, int i)
	{
		//line 427 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( ( flag[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 2 )) != 0 );
	}
	
	
	public static boolean flagIsDel(int[] flag, int i)
	{
		//line 430 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( ( flag[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 1 )) != 0 );
	}
	
	
	public static boolean isEither(int[] flag, int i)
	{
		//line 433 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( ( flag[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 3 )) != 0 );
	}
	
	
	public static void setIsDelFalse(int[] flag, int i)
	{
		//line 436 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flag[( i >> 4 )] &=  ~ ((( 1 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsEmptyFalse(int[] flag, int i)
	{
		//line 439 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flag[( i >> 4 )] &=  ~ ((( 2 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsBothFalse(int[] flag, int i)
	{
		//line 442 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flag[( i >> 4 )] &=  ~ ((( 3 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsDelTrue(int[] flag, int i)
	{
		//line 445 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flag[( i >> 4 )] |= ( 1 << (( (( i & 15 )) << 1 )) );
	}
	
	
	public static int roundUp(int x)
	{
		//line 449 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		 -- x;
		//line 450 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 1 );
		//line 451 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 2 );
		//line 452 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 4 );
		//line 453 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 8 );
		//line 454 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 16 );
		//line 455 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return  ++ x;
	}
	
	
	public static int flagsSize(int m)
	{
		//line 459 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( m < 16 )) 
		{
			//line 459 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return 1;
		}
		else
		{
			//line 459 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return ( m >> 4 );
		}
		
	}
	
	
	public int[] flags;
	
	public int[] _keys;
	
	public T[] vals;
	
	public int nBuckets;
	
	public int size;
	
	public int nOccupied;
	
	public int upperBound;
	
	public int cachedKey;
	
	public int cachedIndex;
	
	public void set(int key, T value)
	{
		//line 57 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int x = 0;
		//line 58 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.nOccupied >= this.upperBound )) 
		{
			//line 60 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( this.nBuckets > ( this.size << 1 ) )) 
			{
				//line 61 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.resize(( this.nBuckets - 1 ));
			}
			else
			{
				//line 63 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.resize(( this.nBuckets + 1 ));
			}
			
		}
		
		//line 66 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] flags = this.flags;
		//line 66 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] _keys = this._keys;
		//line 67 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int mask = ( this.nBuckets - 1 );
			//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x = this.nBuckets;
			//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int site = x;
			//line 70 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int k = key;
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int i = ( k & mask );
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int delKey = -1;
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 2 )) != 0 )) 
			{
				//line 76 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				x = i;
			}
			else
			{
				//line 78 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				int inc = ( (( ( ( k >> 3 ) ^ ( k << 3 ) ) | 1 )) & mask );
				//line 79 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				int last = i;
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				while ( ! ((( ( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 2 )) != 0 ) || ( _keys[i] == key ) ))) )
				{
					//line 82 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( ( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 1 )) != 0 ) && ( delKey == -1 ) )) 
					{
						//line 83 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						delKey = i;
					}
					
					//line 84 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					i = ( ( i + inc ) & mask );
				}
				
				//line 93 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( ( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 2 )) != 0 ) && ( delKey != -1 ) )) 
				{
					//line 94 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					x = delKey;
				}
				else
				{
					//line 96 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					x = i;
				}
				
			}
			
		}
		
		//line 100 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( (( ( flags[( x >> 4 )] >>> (( (( x & 15 )) << 1 )) ) & 2 )) != 0 )) 
		{
			//line 102 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			_keys[x] = key;
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.vals[x] = value;
			//line 104 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			flags[( x >> 4 )] &=  ~ ((( 3 << (( (( x & 15 )) << 1 )) ))) ;
			//line 105 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.size++;
			//line 106 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nOccupied++;
		}
		else
		{
			//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( (( ( flags[( x >> 4 )] >>> (( (( x & 15 )) << 1 )) ) & 1 )) != 0 )) 
			{
				//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				_keys[x] = key;
				//line 109 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.vals[x] = value;
				//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				flags[( x >> 4 )] &=  ~ ((( 3 << (( (( x & 15 )) << 1 )) ))) ;
				//line 111 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.size++;
			}
			else
			{
				//line 114 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.vals[x] = value;
			}
			
		}
		
	}
	
	
	public int lookup(int key)
	{
		//line 120 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.nBuckets != 0 )) 
		{
			//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] flags = this.flags;
			//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] _keys = this._keys;
			//line 124 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int mask = ( this.nBuckets - 1 );
			//line 124 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int k = key;
			//line 125 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int i = ( k & mask );
			//line 126 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int inc = ( (( ( ( k >> 3 ) ^ ( k << 3 ) ) | 1 )) & mask );
			//line 127 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int last = i;
			//line 128 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			while (( ( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 2 )) == 0 ) && (( ( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 1 )) != 0 ) || ( _keys[i] != key ) )) ))
			{
				//line 130 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				i = ( ( i + inc ) & mask );
				//line 131 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( i == last )) 
				{
					//line 132 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					return -1;
				}
				
			}
			
			//line 134 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( (( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 3 )) != 0 )) 
			{
				//line 134 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return -1;
			}
			else
			{
				//line 134 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return i;
			}
			
		}
		
		//line 137 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return -1;
	}
	
	
	public Object get(int key)
	{
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int idx = -1;
		//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		boolean tmp = false;
		//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.cachedKey == key )) 
		{
			//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			idx = this.cachedIndex;
			//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			tmp = ( idx != -1 );
		}
		else
		{
			//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			tmp = false;
		}
		
		//line 143 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (tmp) 
		{
			//line 145 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return this.vals[idx];
		}
		
		//line 148 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		idx = this.lookup(key);
		//line 149 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( idx != -1 )) 
		{
			//line 151 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedKey = key;
			//line 152 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedIndex = idx;
			//line 154 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return this.vals[idx];
		}
		
		//line 157 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return null;
	}
	
	
	public void resize(int newNBuckets)
	{
		//line 231 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] newFlags = null;
		//line 232 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int j = 1;
		//line 233 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int x = newNBuckets;
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			 -- x;
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 1 );
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 2 );
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 4 );
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 8 );
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 16 );
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			newNBuckets =  ++ x;
			//line 235 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( newNBuckets < 4 )) 
			{
				//line 235 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				newNBuckets = 4;
			}
			
			//line 236 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( this.size >= ( ( newNBuckets * 0.7 ) + 0.5 ) )) 
			{
				//line 238 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				j = 0;
			}
			else
			{
				//line 240 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				int nfSize = ( (( newNBuckets < 16 )) ? (1) : (( newNBuckets >> 4 )) );
				//line 241 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				newFlags = new int[nfSize];
				//line 242 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 242 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int _g1 = 0;
					//line 242 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int _g = nfSize;
					//line 242 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					while (( _g1 < _g ))
					{
						//line 242 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int i = _g1++;
						//line 243 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						newFlags[i] = -1431655766;
					}
					
				}
				
				//line 244 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( this.nBuckets < newNBuckets )) 
				{
					//line 246 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int[] k = new int[newNBuckets];
					//line 247 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( this._keys != null )) 
					{
						//line 248 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						System.arraycopy(((Object) (this._keys) ), ((int) (0) ), ((Object) (k) ), ((int) (0) ), ((int) (this.nBuckets) ));
					}
					
					//line 249 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this._keys = k;
					//line 251 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T[] v = ((T[]) (((Object) (new Object[newNBuckets]) )) );
					//line 252 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( this.vals != null )) 
					{
						//line 253 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						System.arraycopy(((Object) (this.vals) ), ((int) (0) ), ((Object) (v) ), ((int) (0) ), ((int) (this.nBuckets) ));
					}
					
					//line 254 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this.vals = v;
				}
				
			}
			
		}
		
		//line 259 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( j != 0 )) 
		{
			//line 262 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedKey = 0;
			//line 263 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedIndex = -1;
			//line 265 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			j = -1;
			//line 266 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int nBuckets = this.nBuckets;
			//line 266 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] _keys = this._keys;
			//line 266 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			T[] vals = this.vals;
			//line 266 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] flags = this.flags;
			//line 268 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int newMask = ( newNBuckets - 1 );
			//line 269 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			while ((  ++ j < nBuckets ))
			{
				//line 271 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( (( ( flags[( j >> 4 )] >>> (( (( j & 15 )) << 1 )) ) & 3 )) == 0 )) 
				{
					//line 273 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int key = _keys[j];
					//line 274 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T val = vals[j];
					//line 276 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					flags[( j >> 4 )] |= ( 1 << (( (( j & 15 )) << 1 )) );
					//line 277 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					while (true)
					{
						//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int k1 = key;
						//line 280 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int inc = ( (( ( ( k1 >> 3 ) ^ ( k1 << 3 ) ) | 1 )) & newMask );
						//line 281 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int i1 = ( k1 & newMask );
						//line 282 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						while (( (( ( newFlags[( i1 >> 4 )] >>> (( (( i1 & 15 )) << 1 )) ) & 2 )) == 0 ))
						{
							//line 283 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							i1 = ( ( i1 + inc ) & newMask );
						}
						
						//line 284 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						newFlags[( i1 >> 4 )] &=  ~ ((( 2 << (( (( i1 & 15 )) << 1 )) ))) ;
						//line 286 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						if (( ( i1 < nBuckets ) && ( (( ( flags[( i1 >> 4 )] >>> (( (( i1 & 15 )) << 1 )) ) & 3 )) == 0 ) )) 
						{
							//line 288 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							{
								//line 289 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								int tmp = _keys[i1];
								//line 290 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								_keys[i1] = key;
								//line 291 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								key = tmp;
							}
							
							//line 293 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							{
								//line 294 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								T tmp1 = vals[i1];
								//line 295 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								vals[i1] = val;
								//line 296 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								val = tmp1;
							}
							
							//line 299 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							flags[( i1 >> 4 )] |= ( 1 << (( (( i1 & 15 )) << 1 )) );
						}
						else
						{
							//line 301 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							_keys[i1] = key;
							//line 302 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							vals[i1] = val;
							//line 303 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							break;
						}
						
					}
					
				}
				
			}
			
			//line 309 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( nBuckets > newNBuckets )) 
			{
				//line 311 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 312 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int[] k2 = new int[newNBuckets];
					//line 313 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					System.arraycopy(((Object) (_keys) ), ((int) (0) ), ((Object) (k2) ), ((int) (0) ), ((int) (newNBuckets) ));
					//line 314 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this._keys = k2;
				}
				
				//line 316 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 317 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T[] v1 = ((T[]) (((Object) (new Object[newNBuckets]) )) );
					//line 318 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					System.arraycopy(((Object) (vals) ), ((int) (0) ), ((Object) (v1) ), ((int) (0) ), ((int) (newNBuckets) ));
					//line 319 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this.vals = v1;
				}
				
			}
			
			//line 323 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.flags = newFlags;
			//line 324 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nBuckets = newNBuckets;
			//line 325 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nOccupied = this.size;
			//line 326 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.upperBound = ((int) (( ( newNBuckets * 0.7 ) + .5 )) );
		}
		
	}
	
	
	public Object keys()
	{
		//line 334 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		IntMap<T> _gthis = this;
		//line 336 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] i = new int[]{0};
		//line 337 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int len = this.nBuckets;
		//line 338 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 339 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			haxe.lang.Function __temp_odecl1 = new haxe.ds.IntMap_keys_339__Fun<T>(len, i, _gthis);
			//line 350 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			haxe.lang.Function __temp_odecl2 = new haxe.ds.IntMap_keys_350__Fun<T>(i, _gthis);
			//line 338 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return new haxe.lang.DynamicObject(new String[]{"hasNext", "next"}, new Object[]{__temp_odecl1, __temp_odecl2}, new String[]{}, new double[]{});
		}
		
	}
	
	
	@Override public double __hx_setField_f(String field, double value, boolean handleProperties)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedIndex = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nBuckets = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedKey = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.size = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.upperBound = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nOccupied = ((int) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public Object __hx_setField(String field, Object value, boolean handleProperties)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedIndex = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 97513095:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("flags")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.flags = ((int[]) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedKey = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 91023059:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("_keys")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this._keys = ((int[]) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.upperBound = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3612018:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("vals")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.vals = ((T[]) (value) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nOccupied = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nBuckets = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.size = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public Object __hx_getField(String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 3288564:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("keys")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "keys")) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 97513095:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("flags")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.flags;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -934437708:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("resize")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "resize")) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 91023059:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("_keys")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this._keys;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 102230:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("get")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get")) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3612018:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("vals")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.vals;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1097094790:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("lookup")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "lookup")) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.nBuckets;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 113762:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("set")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set")) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.size;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 1005083856:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.cachedIndex;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.nOccupied;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.cachedKey;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.upperBound;
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(String field, boolean throwErrors, boolean handleProperties)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.cachedIndex) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.nBuckets) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.cachedKey) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.size) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.upperBound) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.nOccupied) );
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public Object __hx_invokeField(String field, haxe.root.Array dynargs)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 3288564:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("keys")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.keys();
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 113762:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("set")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.set(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ), ((T) (dynargs.__get(1)) ));
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -934437708:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("resize")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.resize(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1097094790:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("lookup")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.lookup(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 102230:
				{
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("get")) 
					{
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.get(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<String> baseArr)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("cachedIndex");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("cachedKey");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("upperBound");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("nOccupied");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("size");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("nBuckets");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("vals");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("_keys");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("flags");
		//line 34 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


