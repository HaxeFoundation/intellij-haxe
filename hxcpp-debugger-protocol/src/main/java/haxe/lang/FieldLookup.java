/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package haxe.lang;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class FieldLookup extends HxObject
{
	public FieldLookup(EmptyObject empty)
	{
	}
	
	
	public FieldLookup()
	{
		//line 28 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		FieldLookup.__hx_ctor_haxe_lang_FieldLookup(this);
	}
	
	
	public static void __hx_ctor_haxe_lang_FieldLookup(FieldLookup __hx_this)
	{
	}
	
	
	public static int hash(String s)
	{
		
		return s.hashCode();
	
	}
	
	
	public static int findHash(String hash, String[] hashs, int length)
	{
		//line 41 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		int min = 0;
		//line 42 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		int max = length;
		//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		while (( min < max ))
		{
			//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			int mid = ((int) (( (( max + min )) / 2 )) );
			//line 47 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			int classify = hash.compareTo(hashs[mid]);
			//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( classify < 0 )) 
			{
				//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				max = mid;
			}
			else
			{
				//line 51 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( classify > 0 )) 
				{
					//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					min = ( mid + 1 );
				}
				else
				{
					//line 54 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					return mid;
				}
				
			}
			
		}
		
		//line 58 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		return  ~ (min) ;
	}
	
	
	public static void removeString(String[] a, int length, int pos)
	{
		//line 62 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		System.arraycopy(((Object) (a) ), ((int) (( pos + 1 )) ), ((Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		//line 63 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a[( length - 1 )] = null;
	}
	
	
	public static void removeFloat(double[] a, int length, int pos)
	{
		//line 67 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		System.arraycopy(((Object) (a) ), ((int) (( pos + 1 )) ), ((Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a[( length - 1 )] = ((double) (0) );
	}
	
	
	public static void removeDynamic(Object[] a, int length, int pos)
	{
		//line 72 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		System.arraycopy(((Object) (a) ), ((int) (( pos + 1 )) ), ((Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a[( length - 1 )] = null;
	}
	
	
	public static String[] insertString(String[] a, int length, int pos, String x)
	{
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		String[] a1 = a;
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		int capacity = a1.length;
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		if (( pos == length )) 
		{
			//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( capacity == length )) 
			{
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				String[] newarr = new String[( (( length << 1 )) + 1 )];
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				a1 = newarr;
			}
			
		}
		else
		{
			//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( pos == 0 )) 
			{
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					String[] newarr1 = new String[( (( length << 1 )) + 1 )];
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr1;
				}
				else
				{
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					String[] newarr2 = new String[( (( length << 1 )) + 1 )];
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr2;
				}
				else
				{
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a1[pos] = x;
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		return a1;
	}
	
	
	public static double[] insertFloat(double[] a, int length, int pos, double x)
	{
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		double[] a1 = a;
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		int capacity = a1.length;
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		if (( pos == length )) 
		{
			//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( capacity == length )) 
			{
				//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				double[] newarr = new double[( (( length << 1 )) + 1 )];
				//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				a1 = newarr;
			}
			
		}
		else
		{
			//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( pos == 0 )) 
			{
				//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					double[] newarr1 = new double[( (( length << 1 )) + 1 )];
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr1;
				}
				else
				{
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					double[] newarr2 = new double[( (( length << 1 )) + 1 )];
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr2;
				}
				else
				{
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a1[pos] = x;
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		return a1;
	}
	
	
	public static Object[] insertDynamic(Object[] a, int length, int pos, Object x)
	{
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		Object[] a1 = a;
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		int capacity = a1.length;
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		if (( pos == length )) 
		{
			//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( capacity == length )) 
			{
				//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				Object[] newarr = new Object[( (( length << 1 )) + 1 )];
				//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				a1 = newarr;
			}
			
		}
		else
		{
			//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
			if (( pos == 0 )) 
			{
				//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					Object[] newarr1 = new Object[( (( length << 1 )) + 1 )];
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr1;
				}
				else
				{
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
				if (( capacity == length )) 
				{
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					Object[] newarr2 = new Object[( (( length << 1 )) + 1 )];
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					a1 = newarr2;
				}
				else
				{
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (pos) ), ((Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
					System.arraycopy(((Object) (a1) ), ((int) (0) ), ((Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		a1[pos] = ((Object) (x) );
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\FieldLookup.hx"
		return a1;
	}
	
	
}


