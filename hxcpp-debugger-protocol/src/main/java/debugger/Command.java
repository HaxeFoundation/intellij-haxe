/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package debugger;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Command extends haxe.lang.ParamEnum
{
	public Command(int index, Object[] params)
	{
		//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\internal\\HxObject.hx"
		super(index, params);
	}
	
	
	public static final String[] __hx_constructs = new String[]{"Exit", "Detach", "Files", "FilesFullPath", "AllClasses", "Classes", "Mem", "Compact", "Collect", "SetCurrentThread", "AddFileLineBreakpoint", "AddClassFunctionBreakpoint", "ListBreakpoints", "DescribeBreakpoint", "DisableAllBreakpoints", "DisableBreakpointRange", "EnableAllBreakpoints", "EnableBreakpointRange", "DeleteAllBreakpoints", "DeleteBreakpointRange", "DeleteFileLineBreakpoint", "BreakNow", "Continue", "Step", "Next", "Finish", "WhereCurrentThread", "WhereAllThreads", "Up", "Down", "SetFrame", "Variables", "PrintExpression", "SetExpression", "GetStructured"};
	
	public static final Command Exit = new Command(0, null);
	
	public static final Command Detach = new Command(1, null);
	
	public static final Command Files = new Command(2, null);
	
	public static final Command FilesFullPath = new Command(3, null);
	
	public static final Command AllClasses = new Command(4, null);
	
	public static Command Classes(String continuation)
	{
		//line 72 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(5, new Object[]{continuation});
	}
	
	
	public static final Command Mem = new Command(6, null);
	
	public static final Command Compact = new Command(7, null);
	
	public static final Command Collect = new Command(8, null);
	
	public static Command SetCurrentThread(int number)
	{
		//line 84 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(9, new Object[]{number});
	}
	
	
	public static Command AddFileLineBreakpoint(String fileName, int lineNumber)
	{
		//line 87 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(10, new Object[]{fileName, lineNumber});
	}
	
	
	public static Command AddClassFunctionBreakpoint(String className, String functionName)
	{
		//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(11, new Object[]{className, functionName});
	}
	
	
	public static Command ListBreakpoints(boolean enabled, boolean disabled)
	{
		//line 94 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(12, new Object[]{enabled, disabled});
	}
	
	
	public static Command DescribeBreakpoint(int number)
	{
		//line 97 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(13, new Object[]{number});
	}
	
	
	public static final Command DisableAllBreakpoints = new Command(14, null);
	
	public static Command DisableBreakpointRange(int first, int last)
	{
		//line 103 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(15, new Object[]{first, last});
	}
	
	
	public static final Command EnableAllBreakpoints = new Command(16, null);
	
	public static Command EnableBreakpointRange(int first, int last)
	{
		//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(17, new Object[]{first, last});
	}
	
	
	public static final Command DeleteAllBreakpoints = new Command(18, null);
	
	public static Command DeleteBreakpointRange(int first, int last)
	{
		//line 115 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(19, new Object[]{first, last});
	}
	
	
	public static Command DeleteFileLineBreakpoint(String fileName, int lineNumber)
	{
		//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(20, new Object[]{fileName, lineNumber});
	}
	
	
	public static final Command BreakNow = new Command(21, null);
	
	public static Command Continue(int count)
	{
		//line 124 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(22, new Object[]{count});
	}
	
	
	public static Command Step(int count)
	{
		//line 127 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(23, new Object[]{count});
	}
	
	
	public static Command Next(int count)
	{
		//line 130 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(24, new Object[]{count});
	}
	
	
	public static Command Finish(int count)
	{
		//line 133 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(25, new Object[]{count});
	}
	
	
	public static Command WhereCurrentThread(boolean unsafe)
	{
		//line 136 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(26, new Object[]{unsafe});
	}
	
	
	public static final Command WhereAllThreads = new Command(27, null);
	
	public static Command Up(int count)
	{
		//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(28, new Object[]{count});
	}
	
	
	public static Command Down(int count)
	{
		//line 145 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(29, new Object[]{count});
	}
	
	
	public static Command SetFrame(int number)
	{
		//line 148 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(30, new Object[]{number});
	}
	
	
	public static Command Variables(boolean unsafe)
	{
		//line 151 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(31, new Object[]{unsafe});
	}
	
	
	public static Command PrintExpression(boolean unsafe, String expression)
	{
		//line 154 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(32, new Object[]{unsafe, expression});
	}
	
	
	public static Command SetExpression(boolean unsafe, String lhs, String rhs)
	{
		//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(33, new Object[]{unsafe, lhs, rhs});
	}
	
	
	public static Command GetStructured(boolean unsafe, String expression)
	{
		//line 160 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return new Command(34, new Object[]{unsafe, expression});
	}
	
	
	@Override public String getTag()
	{
		//line 55 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\IController.hx"
		return Command.__hx_constructs[this.index];
	}
	
	
}


