/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Haxe 3.4.7
package debugger;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class HaxeProtocol extends haxe.lang.HxObject
{
	static
	{
		//line 134 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		HaxeProtocol.gClientIdentification = "Haxe debug client v1.1 coming at you!\n\n";
		//line 136 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		HaxeProtocol.gServerIdentification = "Haxe debug server v1.1 ready and willing, sir!\n\n";
	}
	
	public HaxeProtocol(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public HaxeProtocol()
	{
		//line 28 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		HaxeProtocol.__hx_ctor_debugger_HaxeProtocol(this);
	}
	
	
	public static void __hx_ctor_debugger_HaxeProtocol(HaxeProtocol __hx_this)
	{
	}
	
	
	public static void writeClientIdentification(haxe.io.Output output)
	{
		//line 32 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		output.writeString(HaxeProtocol.gClientIdentification);
	}
	
	
	public static void writeServerIdentification(haxe.io.Output output)
	{
		//line 37 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		output.writeString(HaxeProtocol.gServerIdentification);
	}
	
	
	public static void readClientIdentification(haxe.io.Input input)
	{
		//line 42 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		haxe.io.Bytes id = input.read(HaxeProtocol.gClientIdentification.length());
		//line 43 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		if ( ! (haxe.lang.Runtime.valEq(id.toString(), HaxeProtocol.gClientIdentification)) )
		{
			//line 44 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			throw haxe.lang.HaxeException.wrap(( "Unexpected client identification string: " + haxe.root.Std.string(id) ));
		}
		
	}
	
	
	public static void readServerIdentification(haxe.io.Input input)
	{
		//line 50 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		haxe.io.Bytes id = input.read(HaxeProtocol.gServerIdentification.length());
		//line 51 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		if ( ! (haxe.lang.Runtime.valEq(id.toString(), HaxeProtocol.gServerIdentification)) )
		{
			//line 52 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			throw haxe.lang.HaxeException.wrap(( "Unexpected server identification string: " + haxe.root.Std.string(id) ));
		}
		
	}
	
	
	public static void writeCommand(haxe.io.Output output, Command command)
	{
		//line 59 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		HaxeProtocol.writeDynamic(output, command);
	}
	
	
	public static void writeMessage(haxe.io.Output output, Message message)
	{
		//line 65 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		HaxeProtocol.writeDynamic(output, message);
	}
	
	
	public static Command readCommand(haxe.io.Input input)
	{
		//line 70 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		Object raw = HaxeProtocol.readDynamic(input);
		//line 74 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		try 
		{
			//line 74 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			return ((Command) (raw) );
		}
		catch (Throwable __temp_catchallException1)
		{
			//line 74 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			Object __temp_catchall2 = __temp_catchallException1;
			//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			{
				//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				Object e = __temp_catchall2;
				//line 77 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				throw haxe.lang.HaxeException.wrap(( ( ( "Expected Command, but got " + haxe.root.Std.string(raw) ) + ": " ) + haxe.root.Std.string(e) ));
			}
			
		}
		
		
	}
	
	
	public static Message readMessage(haxe.io.Input input)
	{
		//line 83 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		Object raw = HaxeProtocol.readDynamic(input);
		//line 87 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		try 
		{
			//line 87 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			return ((Message) (raw) );
		}
		catch (Throwable __temp_catchallException1)
		{
			//line 87 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			Object __temp_catchall2 = __temp_catchallException1;
			//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			{
				//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				Object e = __temp_catchall2;
				//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				throw haxe.lang.HaxeException.wrap(( ( ( "Expected Message, but got " + haxe.root.Std.string(raw) ) + ": " ) + haxe.root.Std.string(e) ));
			}
			
		}
		
		
	}
	
	
	public static void writeDynamic(haxe.io.Output output, Object value)
	{
		//line 98 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		String string = haxe.Serializer.run(value);
		//line 101 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		int msg_len = string.length();
		//line 102 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		haxe.io.Bytes msg_len_raw = haxe.io.Bytes.alloc(8);
		//line 104 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		{
			//line 104 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			int _g = 0;
			//line 104 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			while (( _g < 8 ))
			{
				//line 104 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				int i = _g++;
				//line 105 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				msg_len_raw.b[( 7 - i )] = ((byte) (( ( msg_len % 10 ) + 48 )) );
				//line 106 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				msg_len = ((int) (( msg_len / 10 )) );
			}
			
		}
		
		//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		output.write(msg_len_raw);
		//line 110 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		output.writeString(string);
	}
	
	
	public static Object readDynamic(haxe.io.Input input)
	{
		//line 115 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		haxe.io.Bytes msg_len_raw = input.read(8);
		//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		int msg_len = 0;
		//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		{
			//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			int _g = 0;
			//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			while (( _g < 8 ))
			{
				//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				int i = _g++;
				//line 120 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				msg_len *= 10;
				//line 121 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
				msg_len += ( (( msg_len_raw.b[i] & 255 )) - 48 );
			}
			
		}
		
		//line 126 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		if (( msg_len > 2097152 )) 
		{
			//line 127 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
			throw haxe.lang.HaxeException.wrap(( ( "Read bad message length: " + msg_len ) + "." ));
		}
		
		//line 131 "C:\\HaxeToolkit\\haxe\\lib\\hxcpp-debugger\\git\\debugger\\HaxeProtocol.hx"
		return haxe.Unserializer.run(input.read(msg_len).toString());
	}
	
	
	public static String gClientIdentification;
	
	public static String gServerIdentification;
	
}


