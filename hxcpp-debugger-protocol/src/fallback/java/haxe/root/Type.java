// Generated by Haxe 4.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Type extends haxe.lang.HxObject
{
	public Type(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Type()
	{
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		haxe.root.Type.__hx_ctor__Type(this);
	}
	
	
	protected static void __hx_ctor__Type(haxe.root.Type __hx_this)
	{
	}
	
	
	public static java.lang.Class getEnum(java.lang.Object o)
	{
		//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( o instanceof java.lang.Enum ) || ( o instanceof haxe.lang.Enum ) )) 
		{
			//line 49 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return o.getClass();
		}
		
		//line 51 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return null;
	}
	
	
	public static java.lang.String getClassName(java.lang.Class c)
	{
		//line 64 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Class c1 = ((java.lang.Class) (c) );
		//line 65 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.String name = c1.getName();
		//line 66 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (((java.lang.String) (((java.lang.Object) (name) )) ).startsWith(haxe.lang.Runtime.toString("haxe.root."))) 
		{
			//line 67 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (((java.lang.String) (((java.lang.Object) (name) )) ).startsWith(haxe.lang.Runtime.toString("java.lang"))) 
		{
			//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			name = haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.String __temp_svar1 = (name);
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			boolean __temp_executeDef2 = true;
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( __temp_svar1 != null )) 
			{
				//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				switch (__temp_hash3)
				{
					case -1325958191:
					case 2052876273:
					{
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (( (( ( __temp_hash3 == -1325958191 ) && __temp_svar1.equals("double") )) || __temp_svar1.equals("Double") )) 
						{
							//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return "Float";
						}
						
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1939501217:
					{
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("Object")) 
						{
							//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 74 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return "Dynamic";
						}
						
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 104431:
					case -672261858:
					{
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (( (( ( __temp_hash3 == 104431 ) && __temp_svar1.equals("int") )) || __temp_svar1.equals("Integer") )) 
						{
							//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 72 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return "Int";
						}
						
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (__temp_executeDef2) 
			{
				//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return name;
			}
			else
			{
				//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String getEnumName(java.lang.Class e)
	{
		//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Class c = ((java.lang.Class) (e) );
		//line 81 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.String ret = c.getName();
		//line 82 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (((java.lang.String) (((java.lang.Object) (ret) )) ).startsWith(haxe.lang.Runtime.toString("haxe.root."))) 
		{
			//line 83 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(ret, 10, null);
		}
		
		//line 85 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ret;
	}
	
	
	public static java.lang.Class resolveClass(java.lang.String name)
	{
		//line 89 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 90 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( haxe.lang.StringExt.indexOf(name, ".", null) == -1 )) 
			{
				//line 91 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				name = ( "haxe.root." + name );
			}
			
			//line 93 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((java.lang.Class) (java.lang.Class.forName(haxe.lang.Runtime.toString(name))) );
		}
		catch (java.lang.ClassNotFoundException e)
		{
			//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			{
				//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.String __temp_svar1 = (name);
				//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				boolean __temp_executeDef2 = true;
				//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				if (( __temp_svar1 != null )) 
				{
					//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					switch (__temp_svar1.hashCode())
					{
						case 360541844:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.Class")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 100 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return java.lang.Class.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
						case -1242153355:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.String")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return java.lang.String.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
						case -140489125:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.Dynamic")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return java.lang.Object.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
						case 704654956:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.Math")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return java.lang.Math.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
						case 363325304:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.Float")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 97 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return double.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
						case -1778387957:
						{
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							if (__temp_svar1.equals("haxe.root.Int")) 
							{
								//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								__temp_executeDef2 = false;
								//line 96 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
								return int.class;
							}
							
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							break;
						}
						
						
					}
					
				}
				
				//line 102 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				if (__temp_executeDef2) 
				{
					//line 102 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					return null;
				}
				else
				{
					//line 102 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					throw null;
				}
				
			}
			
		}
		
		
	}
	
	
	public static java.lang.Class resolveEnum(java.lang.String name)
	{
		
		if ("Bool".equals(name)) return boolean.class;
		Class r = resolveClass(name);
		if (r != null && (r.getSuperclass() == java.lang.Enum.class || haxe.lang.Enum.class.isAssignableFrom(r)))
			return r;
		return null;
	
	}
	
	
	protected static final java.lang.Class __createEmptyInstance_EMPTY_TYPES = ((java.lang.Class) (((java.lang.Class) (haxe.lang.EmptyObject.class) )) );
	
	protected static final haxe.lang.EmptyObject __createEmptyInstance_EMPTY_ARGS = haxe.lang.EmptyObject.EMPTY;
	
	public static <T> T createEmptyInstance(java.lang.Class cl)
	{
		//line 185 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 186 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.Class t = ((java.lang.Class) (((java.lang.Class) (cl) )) );
			//line 187 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			try 
			{
				//line 188 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.reflect.Constructor<T> ctor = ((java.lang.reflect.Constructor<T>) (t.getConstructor(haxe.root.Type.__createEmptyInstance_EMPTY_TYPES)) );
				//line 189 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ((T) (ctor.newInstance(haxe.root.Type.__createEmptyInstance_EMPTY_ARGS)) );
			}
			catch (java.lang.NoSuchMethodException _1)
			{
				//line 191 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ((T) (t.newInstance()) );
			}
			
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 185 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static <T> T createEnum(java.lang.Class e, java.lang.String constr, haxe.root.Array params)
	{
		//line 196 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( params == null ) || ( params.length == 0 ) )) 
		{
			//line 197 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.Object ret = haxe.lang.Runtime.slowGetField(e, constr, true);
			//line 198 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( ret instanceof haxe.lang.Function )) 
			{
				//line 199 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( "Constructor " + constr ) + " needs parameters" ))) );
			}
			
			//line 201 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((T) (ret) );
		}
		else
		{
			//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.Object[] ret1 = new java.lang.Object[params.length];
			//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			{
				//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				int _g = 0;
				//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				int _g1 = params.length;
				//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				while (( _g < _g1 ))
				{
					//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					int i = _g++;
					//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					ret1[i] = params.__get(i);
				}
				
			}
			
			//line 203 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.Object[] params1 = ret1;
			//line 204 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((T) (haxe.lang.Runtime.slowCallField(e, constr, params1)) );
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> getClassFields(java.lang.Class c)
	{
		
		Array<String> ret = new Array<String>();
		if (c == java.lang.String.class)
		{
			ret.push("fromCharCode");
			return ret;
		}

		for (java.lang.reflect.Field f : c.getDeclaredFields())
		{
			java.lang.String fname = f.getName();
			if (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith("__hx_"))
			ret.push(fname);
		}

		for (java.lang.reflect.Method m : c.getDeclaredMethods())
		{
			if (m.getDeclaringClass() == java.lang.Object.class)
				continue;
			java.lang.String mname = m.getName();
			if (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith("__hx_"))
				ret.push(mname);
		}

		return ret;
	
	}
	
	
	public static haxe.root.Array<java.lang.String> getEnumConstructs(java.lang.Class e)
	{
		//line 273 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (haxe.root.Reflect.hasField(e, "__hx_constructs")) 
		{
			//line 274 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			haxe.root.Array<java.lang.String> ret = haxe.java.Lib.array_String(((java.lang.String[]) (haxe.lang.Runtime.getField(e, "__hx_constructs", true)) ));
			//line 275 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ret.copy();
		}
		
		//line 277 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Enum[] vals = ((java.lang.Enum[]) (haxe.lang.Runtime.callField(e, "values", null)) );
		//line 277 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		haxe.root.Array<java.lang.String> ret1 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int _g = 0;
			//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int _g1 = vals.length;
			//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			while (( _g < _g1 ))
			{
				//line 279 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				int i = _g++;
				//line 280 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				ret1.__set(i, vals[i].name());
			}
			
		}
		
		//line 281 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ret1;
	}
	
	
	public static haxe.root.ValueType typeof(java.lang.Object v)
	{
		
		if (v == null) return ValueType.TNull;

		if (v instanceof haxe.lang.IHxObject) {
			haxe.lang.IHxObject vobj = (haxe.lang.IHxObject) v;
			java.lang.Class cl = vobj.getClass();
			if (v instanceof haxe.lang.DynamicObject)
				return ValueType.TObject;
			else
				return ValueType.TClass(cl);
		} else if (v instanceof java.lang.Number) {
			java.lang.Number n = (java.lang.Number) v;
			if (n.intValue() == n.doubleValue())
				return ValueType.TInt;
			else
				return ValueType.TFloat;
		} else if (v instanceof haxe.lang.Function) {
			return ValueType.TFunction;
		} else if (v instanceof java.lang.Enum || v instanceof haxe.lang.Enum) {
			return ValueType.TEnum(v.getClass());
		} else if (v instanceof java.lang.Boolean) {
			return ValueType.TBool;
		} else if (v instanceof java.lang.Class) {
			return ValueType.TObject;
		} else {
			return ValueType.TClass(v.getClass());
		}
	
	}
	
	
	public static <T> boolean enumEq(T a, T b)
	{
		
			if (a instanceof haxe.lang.Enum)
				return a.equals(b);
			else
				return haxe.lang.Runtime.eq(a, b);
	
	}
	
	
	public static java.lang.String enumConstructor(java.lang.Object e)
	{
		
		if (e instanceof java.lang.Enum)
			return ((java.lang.Enum) e).name();
		else
			return ((haxe.lang.Enum) e).getTag();
	
	}
	
	
	public static haxe.root.Array enumParameters(java.lang.Object e)
	{
		
		return ( e instanceof java.lang.Enum ) ? new haxe.root.Array() : ((haxe.lang.Enum) e).getParams();
	
	}
	
	
	public static int enumIndex(java.lang.Object e)
	{
		
		if (e instanceof java.lang.Enum)
			return ((java.lang.Enum) e).ordinal();
		else
			return ((haxe.lang.Enum) e).index;
	
	}
	
	
}


