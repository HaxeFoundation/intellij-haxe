// Generated by Haxe 4.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Std
{
	public Std()
	{
	}
	
	
	public static boolean isOfType(java.lang.Object v, java.lang.Object t)
	{
		//line 35 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( v == null )) 
		{
			//line 36 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return false;
		}
		
		//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( t == null )) 
		{
			//line 38 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return false;
		}
		
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		java.lang.Class clt = ((java.lang.Class) (t) );
		//line 40 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( ((java.lang.Object) (clt) ) == ((java.lang.Object) (null) ) )) 
		{
			//line 41 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return false;
		}
		
		//line 42 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		java.lang.String name = clt.getName();
		//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		{
			//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			java.lang.String __temp_svar1 = (name);
			//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( __temp_svar1 != null )) 
			{
				//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				switch (__temp_hash3)
				{
					case 344809556:
					case 64711720:
					{
						//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if (( (( ( __temp_hash3 == 344809556 ) && __temp_svar1.equals("java.lang.Boolean") )) || __temp_svar1.equals("boolean") )) 
						{
							//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							return v instanceof java.lang.Boolean;
						}
						
						//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					case 1063877011:
					{
						//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if (__temp_svar1.equals("java.lang.Object")) 
						{
							//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							return true;
						}
						
						//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					case 761287205:
					case -1325958191:
					{
						//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if (( (( ( __temp_hash3 == 761287205 ) && __temp_svar1.equals("java.lang.Double") )) || __temp_svar1.equals("double") )) 
						{
							//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							return haxe.lang.Runtime.isDouble(v);
						}
						
						//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					case -2056817302:
					case 104431:
					{
						//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if (( (( ( __temp_hash3 == -2056817302 ) && __temp_svar1.equals("java.lang.Integer") )) || __temp_svar1.equals("int") )) 
						{
							//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							return haxe.lang.Runtime.isInt(v);
						}
						
						//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
				}
				
			}
			
		}
		
		//line 55 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		java.lang.Class clv = v.getClass();
		//line 57 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		return clt.isAssignableFrom(((java.lang.Class) (clv) ));
	}
	
	
	public static java.lang.String string(java.lang.Object s)
	{
		//line 61 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		return ( haxe.lang.Runtime.toString(s) + "" );
	}
	
	
	public static int _int(double x)
	{
		//line 65 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		return ((int) (x) );
	}
	
	
	public static java.lang.Object parseInt(java.lang.String x)
	{
		//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		try 
		{
			//line 81 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( x == null )) 
			{
				//line 82 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				return null;
			}
			
			//line 84 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int len = x.length();
			//line 85 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int index = 0;
			//line 91 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			while (( index < len ))
			{
				//line 92 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				int code = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(index)) );
				//line 92 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				if ( ! ((( ( ( code > 8 ) && ( code < 14 ) ) || ( code == 32 ) ))) ) 
				{
					//line 93 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					break;
				}
				
				//line 94 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				 ++ index;
			}
			
			//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			boolean isNegative = false;
			//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( index < len )) 
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				int sign = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(index)) );
				//line 100 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				if (( ( sign == 45 ) || ( sign == 43 ) )) 
				{
					//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					 ++ index;
				}
				
				//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				isNegative = ( sign == 45 );
			}
			else
			{
				//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				isNegative = false;
			}
			
			//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			boolean isHexadecimal = false;
			//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( ( index + 1 ) < len )) 
			{
				//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				int cur = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(index)) );
				//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				int next = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(( index + 1 ))) );
				//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				isHexadecimal = ( ( cur == 48 ) && (( ( next == 120 ) || ( next == 88 ) )) );
			}
			else
			{
				//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				isHexadecimal = false;
			}
			
			//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (isHexadecimal) 
			{
				//line 109 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				index += 2;
			}
			
			//line 113 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int cur1 = index;
			//line 114 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (isHexadecimal) 
			{
				//line 115 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				while (( cur1 < len ))
				{
					//line 116 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					int code1 = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(cur1)) );
					//line 116 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					if ( ! ((( ( ( ( 48 <= code1 ) && ( code1 <= 57 ) ) || ( ( 97 <= code1 ) && ( code1 <= 102 ) ) ) || ( ( 65 <= code1 ) && ( code1 <= 70 ) ) ))) ) 
					{
						//line 117 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					//line 118 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					 ++ cur1;
				}
				
			}
			else
			{
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				while (( cur1 < len ))
				{
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					int code2 = ((int) (((java.lang.String) (((java.lang.Object) (x) )) ).charAt(cur1)) );
					//line 122 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					if ( ! ((( ( 48 <= code2 ) && ( code2 <= 57 ) ))) ) 
					{
						//line 123 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					//line 124 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					 ++ cur1;
				}
				
			}
			
			//line 112 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int firstInvalidIndex = cur1;
			//line 131 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( index == firstInvalidIndex )) 
			{
				//line 132 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				return null;
			}
			
			//line 134 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int result = java.lang.Integer.parseInt(haxe.lang.Runtime.toString(haxe.lang.StringExt.substring(x, index, firstInvalidIndex)), ((int) (( (isHexadecimal) ? (16) : (10) )) ));
			//line 135 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (isNegative) 
			{
				//line 135 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				return  - (result) ;
			}
			else
			{
				//line 135 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				return result;
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static double parseFloat(java.lang.String x)
	{
		//line 139 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( x == null )) 
		{
			//line 140 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return java.lang.Double.NaN;
		}
		
		//line 141 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		x = haxe.root.StringTools.ltrim(x);
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean found = false;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean hasDot = false;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean hasSign = false;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean hasE = false;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean hasESign = false;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		boolean hasEData = false;
		//line 148 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		int i = -1;
		//line 152 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		label1:
		while ((  ++ i < x.length() ))
		{
			//line 153 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			int chr = ((int) (x.charAt(i)) );
			//line 154 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (( ( chr >= 48 ) && ( chr <= 57 ) )) 
			{
				//line 155 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				if (hasE) 
				{
					//line 156 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
					hasEData = true;
				}
				
				//line 158 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				found = true;
			}
			else
			{
				//line 160 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				switch (chr)
				{
					case 43:
					case 45:
					{
						//line 165 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if ((  ! (found)  &&  ! (hasSign)  )) 
						{
							//line 166 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							hasSign = true;
						}
						else
						{
							//line 167 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							if (( ( ( found &&  ! (hasESign)  ) && hasE ) &&  ! (hasEData)  )) 
							{
								//line 168 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
								hasESign = true;
							}
							else
							{
								//line 170 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
								break label1;
							}
							
						}
						
						//line 165 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					case 46:
					{
						//line 163 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if ( ! (hasDot) ) 
						{
							//line 164 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							hasDot = true;
						}
						else
						{
							//line 170 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							break label1;
						}
						
						//line 163 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					case 69:
					case 101:
					{
						//line 161 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						if ( ! (hasE) ) 
						{
							//line 162 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							hasE = true;
						}
						else
						{
							//line 170 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
							break label1;
						}
						
						//line 161 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break;
					}
					
					
					default:
					{
						//line 170 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
						break label1;
					}
					
				}
				
			}
			
		}
		;
		//line 173 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( hasE &&  ! (hasEData)  )) 
		{
			//line 174 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			 -- i;
			//line 175 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			if (hasESign) 
			{
				//line 176 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
				 -- i;
			}
			
		}
		
		//line 179 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		if (( i != x.length() )) 
		{
			//line 180 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			x = haxe.lang.StringExt.substr(x, 0, i);
		}
		
		//line 182 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
		try 
		{
			//line 182 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return java.lang.Double.parseDouble(haxe.lang.Runtime.toString(x));
		}
		catch (java.lang.Throwable _g)
		{
			//line 182 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Std.hx"
			return java.lang.Double.NaN;
		}
		
		
	}
	
	
}


