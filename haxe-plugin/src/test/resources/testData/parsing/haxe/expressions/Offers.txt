Haxe File
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Offers')
    HaxePsiToken:{('{')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          ACCESS
            HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('toString')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          RETURN_STATEMENT
            HaxePsiToken:return('return')
            STRING_LITERAL_EXPRESSION
              HaxePsiToken:OPEN_QUOTE(''')
              HaxePsiToken:REGULAR_STRING_PART('{Offers: num:')
              SHORT_TEMPLATE_ENTRY
                HaxePsiToken:SHORT_TEMPLATE_ENTRY_START('$')
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('offersNum')
              HaxePsiToken:REGULAR_STRING_PART(',')
              HaxePsiToken:REGULAR_STRING_PART('\n')
              LONG_TEMPLATE_ENTRY
                HaxePsiToken:LONG_TEMPLATE_ENTRY_START('${')
                CALL_EXPRESSION
                  REFERENCE_EXPRESSION
                    REFERENCE_EXPRESSION
                      IDENTIFIER
                        HaxePsiToken:ID('l')
                    HaxePsiToken:.('.')
                    IDENTIFIER
                      HaxePsiToken:ID('toString')
                  HaxePsiToken:(('(')
                  HaxePsiToken:)(')')
                  PsiErrorElement:'&&', '(', '.', '...', <<, <additive expression>, <assign operation>, <bitwise expression>, <compare operation>, <multiplicative expression>, <suffix expression>, '=>', '?', '[' or '||' expected, got '\'
                    PsiElement(BAD_CHARACTER)('\')
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('n')
          PsiErrorElement:'!', '(', '++', '-', '--', ';', '@:arrayAccess', '@:autoBuild', '@:bind', '@:bitmap', '@:build', '@:coreApi', '@:debug', '@:fakeEnum', '@:final', '@:getter', '@:hack', '@:jsRequire', '@:keep', '@:macro', '@:meta', '@:native', '@:nodebug', '@:ns', '@:protected', '@:require', '@:setter', '@:unreflective', ID, LITFLOAT, LITHEX, LITINT, LITOCT, MACRO_ID, OPEN_QUOTE, REG_EXP, '[', break, cast, continue, do, dynamic, false, for, function, if, inline, macro, new, null and ... expected, got '}'
            HaxePsiToken:LONG_TEMPLATE_ENTRY_END('}')
          HaxePsiToken:REGULAR_STRING_PART('\n')
          HaxePsiToken:REGULAR_STRING_PART('}')
          HaxePsiToken:CLOSING_QUOTE(''')
          HaxePsiToken:;(';')
          HaxePsiToken:}('}')
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          ACCESS
            HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
    HaxePsiToken:}('}')