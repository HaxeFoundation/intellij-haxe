Haxe File
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Condition')
    HaxePsiToken:{('{')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        PARAMETER_LIST
          <empty list>
        HaxePsiToken:)(')')
        TYPE_TAG
          HaxePsiToken::(':')
          TYPE_OR_ANONYMOUS
            TYPE
              REFERENCE_EXPRESSION
                IDENTIFIER
                  HaxePsiToken:ID('void')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          IF_STATEMENT
            HaxePsiToken:if('if')
            HaxePsiToken:(('(')
            LOGIC_AND_EXPRESSION
              CALL_EXPRESSION
                REFERENCE_EXPRESSION
                  IDENTIFIER
                    HaxePsiToken:ID('isPrime')
                HaxePsiToken:(('(')
                EXPRESSION_LIST
                  LITERAL_EXPRESSION
                    HaxePsiToken:LITINT('239')
                HaxePsiToken:)(')')
              HaxePsiToken:&&('&&')
              PARENTHESIZED_EXPRESSION
                HaxePsiToken:(('(')
                COMPARE_EXPRESSION
                  BITWISE_EXPRESSION
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('3')
                    BIT_OPERATION
                      HaxePsiToken:^('^')
                    LITERAL_EXPRESSION
                      HaxePsiToken:LITINT('5')
                  COMPARE_OPERATION
                    HaxePsiToken:==('==')
                  LITERAL_EXPRESSION
                    HaxePsiToken:LITINT('6')
                HaxePsiToken:)(')')
            HaxePsiToken:)(')')
            BLOCK_STATEMENT
              HaxePsiToken:{('{')
              HaxePsiToken:}('}')
          HaxePsiToken:}('}')
    HaxePsiToken:}('}')