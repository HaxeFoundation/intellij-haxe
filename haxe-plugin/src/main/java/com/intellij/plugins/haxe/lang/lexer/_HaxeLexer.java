/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import com.intellij.plugins.haxe.lang.lexer.HaxeConditionalCompilationLexerSupport;
import com.intellij.plugins.haxe.util.HaxeDebugLogger;
import com.intellij.openapi.project.Project;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUO_STRING = 2;
  public static final int APOS_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int COMPILER_CONDITIONAL = 10;
  public static final int CC_STRING = 12;
  public static final int CC_APOS_STRING = 14;
  public static final int CC_BLOCK = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\104\1\105\1\6\22\0\1\61\1\75\1\27\1\32\1\7\1\103\1\100\1\30"+
    "\1\66\1\67\1\13\1\25\1\71\1\72\1\26\1\12\1\17\7\16\2\15\1\11\1\70\1\101\1"+
    "\74\1\73\1\76\1\10\1\14\1\62\2\14\1\24\1\14\21\2\1\21\2\2\1\64\1\5\1\65\1"+
    "\102\1\3\1\0\1\44\1\43\1\53\1\46\1\36\1\47\1\54\1\56\1\34\1\2\1\45\1\33\1"+
    "\23\1\35\1\40\1\52\1\63\1\37\1\55\1\51\1\50\1\57\1\42\1\20\1\60\1\2\1\31\1"+
    "\77\1\41\1\22\6\0\1\104\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\12\2\4\0\14"+
    "\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3"+
    "\2\1\0\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10"+
    "\0\13\2\5\0\3\2\15\0\12\4\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4\3\2\2\0\2"+
    "\2\1\0\16\2\15\0\11\2\13\0\1\2\16\0\12\4\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1"+
    "\2\11\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4"+
    "\0\12\4\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0"+
    "\1\2\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0"+
    "\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30"+
    "\0\1\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1"+
    "\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2"+
    "\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\4\7\0\2\2\1\0\1\2\2\0\2\2\1"+
    "\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0"+
    "\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2"+
    "\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6"+
    "\2\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15"+
    "\0\7\2\7\0\16\2\15\0\2\2\12\4\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\14\0\2\104\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2"+
    "\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0"+
    "\2\2\3\0\7\2\6\0\3\2\12\4\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1"+
    "\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\4\5\2\1\0\3\2\1\0\10\2"+
    "\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2"+
    "\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2"+
    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14"+
    "\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0"+
    "\1\2\12\0\4\2\13\0\12\4\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2"+
    "\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2"+
    "\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2"+
    "\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\4\1\0"+
    "\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1"+
    "\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5"+
    "\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\7\1\1\1\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\5\3\1\15\13\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\36\1\40"+
    "\1\36\1\37\2\41\3\37\1\42\1\37\1\43\1\44"+
    "\1\45\1\46\1\44\2\47\1\44\1\50\1\51\2\46"+
    "\1\52\1\53\1\54\1\44\1\55\2\44\1\56\1\57"+
    "\1\0\1\60\1\57\3\0\1\61\1\0\1\62\1\63"+
    "\1\64\1\65\1\66\1\0\1\67\1\0\1\3\1\70"+
    "\1\71\1\72\4\0\1\3\1\73\1\74\13\3\1\75"+
    "\24\3\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\36"+
    "\1\114\1\115\1\41\3\0\1\116\1\0\2\46\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\57\2\0\3\125"+
    "\16\61\1\63\1\126\1\127\1\0\1\130\1\3\1\131"+
    "\1\0\1\132\3\0\3\3\1\133\15\3\1\134\5\3"+
    "\1\135\15\3\1\136\1\137\1\41\2\0\3\140\1\141"+
    "\2\46\1\125\4\61\1\142\16\61\1\0\2\126\1\130"+
    "\1\3\2\0\1\143\1\0\5\3\1\144\1\3\1\145"+
    "\1\146\14\3\1\147\1\150\10\3\1\151\1\152\3\3"+
    "\1\153\1\140\1\46\1\154\23\61\1\63\1\0\1\3"+
    "\1\155\1\0\4\3\1\156\4\3\1\157\1\160\3\3"+
    "\1\161\1\162\2\3\1\163\1\164\4\3\1\165\1\3"+
    "\1\166\1\3\1\167\1\3\1\170\1\171\5\61\1\172"+
    "\3\61\1\173\7\61\1\174\1\175\1\0\1\3\1\176"+
    "\1\177\3\3\1\200\11\3\1\201\1\3\1\202\1\203"+
    "\1\204\5\61\1\205\1\61\1\206\1\207\5\61\1\210"+
    "\2\3\1\211\1\212\2\3\1\213\1\214\1\3\1\215"+
    "\1\216\1\217\1\220\1\3\1\61\1\221\2\61\1\222"+
    "\4\61\1\223\1\224\2\3\1\225\1\226\1\227\1\230"+
    "\1\231\1\232\5\61\1\3\1\233\1\234\1\61\1\235"+
    "\1\61\1\236\1\237\1\240\1\241";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u0276\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0276"+
    "\0\u0276\0\u0276\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u0276\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0276\0\u0276\0\u0aaa\0\u0276\0\u0af0\0\u0b36\0\u0276\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0276"+
    "\0\u0dac\0\u0276\0\u0df2\0\u0e38\0\u0348\0\u038e\0\u04ec\0\u0276"+
    "\0\u0604\0\u0276\0\u0276\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u0276\0\u0276\0\u1022\0\u1068\0\u0276\0\u0276\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u0276"+
    "\0\u12de\0\u0348\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\u0276\0\u0276\0\u14c8\0\u150e\0\u0276\0\u1554\0\u159a\0\u0276"+
    "\0\u0276\0\u0276\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u0302\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u0302\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0276\0\u0276\0\u0276\0\u0276\0\u1ffe\0\u0276\0\u0276\0\u0276"+
    "\0\u2044\0\u0276\0\u208a\0\u0f0a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0276\0\u2274\0\u22ba\0\u0276\0\u136a\0\u1324\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u150e\0\u2760"+
    "\0\u27a6\0\u27ec\0\u0276\0\u2832\0\u0276\0\u2878\0\u28be\0\u2904"+
    "\0\u294a\0\u2990\0\u29d6\0\u0302\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u0302\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u0302"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u0302\0\u0276\0\u3296"+
    "\0\u32dc\0\u3322\0\u0276\0\u2116\0\u20d0\0\u21a2\0\u3368\0\u33ae"+
    "\0\u2274\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u13b0\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u0276\0\u396c"+
    "\0\u39b2\0\u39f8\0\u3a3e\0\u0276\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u0302\0\u3c28\0\u0302\0\u0302\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\u0302\0\u0302\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u0302\0\u0302\0\u41e6\0\u422c"+
    "\0\u4272\0\u0df2\0\u32dc\0\u42b8\0\u0ec4\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u0276\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u0302\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u0302\0\u0302"+
    "\0\u4b78\0\u4bbe\0\u4c04\0\u0302\0\u0302\0\u4c4a\0\u4c90\0\u0302"+
    "\0\u0302\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u0302\0\u4dee\0\u0302"+
    "\0\u4e34\0\u0302\0\u4e7a\0\u0ec4\0\u13b0\0\u4ec0\0\u4f06\0\u4f4c"+
    "\0\u4f92\0\u4fd8\0\u13b0\0\u501e\0\u5064\0\u50aa\0\u13b0\0\u50f0"+
    "\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u13b0\0\u52da"+
    "\0\u5320\0\u5366\0\u0302\0\u0302\0\u53ac\0\u53f2\0\u5438\0\u0302"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668"+
    "\0\u56ae\0\u0302\0\u56f4\0\u0302\0\u0302\0\u13b0\0\u573a\0\u5780"+
    "\0\u57c6\0\u580c\0\u5852\0\u13b0\0\u5898\0\u13b0\0\u13b0\0\u58de"+
    "\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u0276\0\u5a3c\0\u5a82\0\u0302"+
    "\0\u5ac8\0\u5b0e\0\u5b54\0\u0302\0\u0302\0\u5b9a\0\u0302\0\u0302"+
    "\0\u0302\0\u0302\0\u5be0\0\u5c26\0\u13b0\0\u5c6c\0\u5cb2\0\u13b0"+
    "\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u13b0\0\u13b0\0\u5e10\0\u5e56"+
    "\0\u0302\0\u0302\0\u0302\0\u0302\0\u13b0\0\u13b0\0\u5e9c\0\u5ee2"+
    "\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u0302\0\u13b0\0\u6040\0\u13b0"+
    "\0\u6086\0\u13b0\0\u0302\0\u13b0\0\u13b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\1\12\1\13\1\14\1\16"+
    "\1\17\1\20\1\21\1\14\2\22\1\23\2\14\1\24"+
    "\1\25\1\14\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\14\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\14\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\14\1\53\1\14\1\54\1\14\1\13\2\14"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\0\1\13\5\75\1\76\1\75\1\77\17\75\1\100"+
    "\56\75\5\101\1\76\1\101\1\77\20\101\1\100\55\101"+
    "\2\102\2\103\2\102\1\0\5\102\1\103\3\102\2\103"+
    "\1\102\2\103\6\102\6\103\1\102\7\103\1\104\7\103"+
    "\1\102\2\103\20\102\2\0\1\102\1\13\2\14\1\105"+
    "\1\102\1\13\1\14\1\106\1\17\1\20\1\21\1\14"+
    "\2\22\1\23\2\14\1\107\1\25\1\14\1\26\1\27"+
    "\1\30\1\31\1\110\1\111\1\14\1\34\1\35\1\36"+
    "\1\37\1\40\1\112\1\42\1\43\1\44\1\14\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\14\1\53\1\14"+
    "\1\54\1\14\1\13\2\14\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\0\1\13\1\113\1\114"+
    "\2\115\1\116\1\113\1\114\5\113\1\115\2\117\1\120"+
    "\2\115\1\113\2\115\1\113\1\121\1\122\1\123\2\113"+
    "\6\115\1\113\5\115\1\124\1\115\1\125\7\115\1\114"+
    "\2\115\2\113\1\126\1\127\3\113\1\130\1\131\1\132"+
    "\1\113\1\133\1\134\1\135\2\113\1\0\1\114\5\136"+
    "\1\137\1\136\1\0\17\136\1\140\56\136\5\141\1\137"+
    "\1\141\1\0\20\141\1\140\55\141\1\102\1\13\2\14"+
    "\1\105\1\102\1\13\1\14\1\106\1\17\1\20\1\21"+
    "\1\14\2\22\1\23\2\14\1\107\1\25\1\14\1\26"+
    "\1\27\1\30\1\31\1\32\1\111\1\14\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\14"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\14\1\53"+
    "\1\14\1\54\1\14\1\13\2\14\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\0\1\13\107\0"+
    "\1\13\4\0\1\13\52\0\1\13\23\0\1\13\2\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\17\14\1\0\2\14\26\0\1\142\10\0"+
    "\3\142\4\0\1\143\1\0\1\144\7\0\1\143\51\0"+
    "\2\145\3\0\1\145\1\0\1\146\2\0\1\145\3\0"+
    "\2\145\1\0\2\145\6\0\6\145\1\0\17\145\1\0"+
    "\2\145\34\0\1\147\1\150\60\0\1\151\105\0\1\152"+
    "\15\0\1\142\10\0\3\22\4\0\1\143\1\0\1\144"+
    "\7\0\1\143\53\0\1\142\10\0\1\142\2\153\2\154"+
    "\2\0\1\143\1\0\1\144\7\0\1\143\47\0\12\155"+
    "\1\156\73\155\2\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\157\14\14"+
    "\1\0\2\14\47\0\1\160\46\0\1\161\15\0\1\144"+
    "\6\0\1\162\1\0\3\144\6\0\1\163\112\0\1\164"+
    "\1\165\1\0\1\166\51\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\1\167\1\14\6\0\2\14\1\170\3\14"+
    "\1\0\5\14\1\171\11\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\172\2\14\1\0\6\14\1\173\10\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\4\14\1\174\1\14"+
    "\1\0\2\14\6\0\1\175\1\14\1\176\3\14\1\0"+
    "\17\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\3\14\1\177\2\14\1\0"+
    "\17\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\15\14\1\200"+
    "\1\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\14\14\1\201"+
    "\2\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\4\14\1\202\1\14\1\0"+
    "\17\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\1\14\1\203"+
    "\15\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\3\14\1\204\1\14\1\205"+
    "\1\0\16\14\1\206\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\14\1\207"+
    "\3\14\1\210\1\0\2\14\1\211\3\14\1\212\10\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\213\3\14\1\0\13\14"+
    "\1\214\3\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\215\1\14"+
    "\1\0\14\14\1\216\1\14\1\217\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\4\14\1\220\1\14\1\0\2\14\1\221\3\14\1\222"+
    "\10\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\1\223\4\14\1\224\1\0"+
    "\2\14\1\225\14\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\1\226\5\14\1\227\1\230\7\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\2\14\1\231\14\14\1\0\2\14\114\0"+
    "\1\232\1\233\1\234\104\0\1\235\1\236\105\0\1\237"+
    "\105\0\1\240\2\0\1\241\102\0\1\242\3\0\1\243"+
    "\101\0\1\244\4\0\1\245\100\0\1\246\105\0\1\247"+
    "\11\0\5\75\1\0\1\75\1\0\17\75\1\0\56\75"+
    "\6\250\1\0\77\250\2\0\2\251\10\0\1\251\3\0"+
    "\2\251\1\0\2\251\4\0\1\252\1\0\6\251\1\0"+
    "\17\251\1\0\2\251\22\0\5\101\1\0\1\101\1\0"+
    "\20\101\1\0\55\101\2\0\3\103\7\0\6\103\1\0"+
    "\2\103\6\0\6\103\1\0\17\103\1\0\2\103\24\0"+
    "\3\103\7\0\6\103\1\0\2\103\6\0\6\103\1\0"+
    "\14\103\1\253\2\103\1\0\2\103\23\0\1\114\4\0"+
    "\1\114\52\0\1\114\23\0\1\114\2\0\3\115\7\0"+
    "\6\115\1\0\2\115\6\0\6\115\1\0\17\115\1\0"+
    "\2\115\26\0\1\254\10\0\3\254\4\0\1\255\1\0"+
    "\1\256\7\0\1\255\53\0\1\254\10\0\3\117\4\0"+
    "\1\255\1\0\1\256\7\0\1\255\53\0\1\254\10\0"+
    "\1\254\2\257\2\260\2\0\1\255\1\0\1\256\7\0"+
    "\1\255\53\0\1\256\10\0\3\256\70\0\3\115\7\0"+
    "\6\115\1\0\2\115\6\0\6\115\1\0\2\115\1\261"+
    "\14\115\1\0\2\115\24\0\3\115\7\0\6\115\1\0"+
    "\2\115\6\0\4\115\1\262\1\115\1\0\17\115\1\0"+
    "\2\115\116\0\1\263\105\0\1\264\105\0\1\265\110\0"+
    "\1\266\106\0\1\267\101\0\1\270\11\0\5\136\1\0"+
    "\1\136\1\0\17\136\1\0\56\136\6\271\1\0\77\271"+
    "\5\141\1\0\1\141\1\0\20\141\1\0\55\141\4\0"+
    "\1\272\10\0\3\272\5\0\1\273\44\0\1\273\13\0"+
    "\4\274\1\275\10\274\3\275\4\274\1\276\1\274\1\0"+
    "\7\274\1\276\47\274\2\0\3\145\2\0\1\145\4\0"+
    "\6\145\1\0\2\145\6\0\6\145\1\0\17\145\1\0"+
    "\2\145\24\0\2\145\3\0\1\145\4\0\1\145\3\0"+
    "\2\145\1\0\1\277\1\145\6\0\2\145\1\300\1\145"+
    "\1\301\1\302\1\0\1\145\1\303\1\304\1\305\1\306"+
    "\1\307\2\145\1\310\1\311\1\312\1\313\1\314\2\145"+
    "\1\0\2\145\22\0\6\147\1\0\77\147\13\315\1\316"+
    "\72\315\4\0\1\142\10\0\1\142\2\153\4\0\1\143"+
    "\1\0\1\144\7\0\1\143\63\0\4\317\4\0\1\317"+
    "\11\0\1\317\4\0\2\317\1\0\2\317\3\0\1\317"+
    "\6\0\1\317\23\0\5\156\1\320\4\156\1\321\73\156"+
    "\2\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\11\14\1\322\5\14\1\0\2\14"+
    "\50\0\1\323\113\0\1\324\120\0\1\325\71\0\1\326"+
    "\1\0\1\327\1\0\1\330\50\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\10\14"+
    "\1\331\6\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\332\5\14\1\0"+
    "\7\14\1\333\7\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\1\334\14\14\1\335\1\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\1\336"+
    "\5\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\7\14\1\337\7\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\13\14\1\340\3\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\6\14\1\341\10\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\7\14\1\342\7\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\343"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\14\1\344"+
    "\4\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\345"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\13\14\1\346\3\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\5\14\1\347\11\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\2\14\1\350"+
    "\3\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\2\14\1\351"+
    "\3\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\4\14\1\352"+
    "\1\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\353\5\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\2\14\1\354\3\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\7\14"+
    "\1\355\7\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\14\1\356\4\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\6\14"+
    "\1\357\7\14\1\360\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\14\1\361"+
    "\2\14\1\362\1\14\1\0\17\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\10\14\1\363\6\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\1\14\1\364\4\14\1\0\17\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\11\14\1\365\5\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\1\14\1\366\15\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\2\14\1\367\14\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\2\14\1\370\3\14\1\0\17\14\1\0\2\14\24\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\7\14\1\371\3\14\1\372\3\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\373\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\10\14\1\374\6\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\2\14\1\375\14\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\376\1\14\1\0\17\14\1\0"+
    "\2\14\116\0\1\377\13\0\3\251\7\0\6\251\1\0"+
    "\2\251\6\0\6\251\1\0\17\251\1\0\2\251\24\0"+
    "\3\103\7\0\6\103\1\0\2\103\6\0\1\103\1\u0100"+
    "\4\103\1\0\17\103\1\0\2\103\26\0\1\u0101\10\0"+
    "\3\u0101\5\0\1\u0102\44\0\1\u0102\13\0\4\u0103\1\u0104"+
    "\10\u0103\3\u0104\4\u0103\1\u0105\1\u0103\1\0\7\u0103\1\u0105"+
    "\47\u0103\4\0\1\254\10\0\1\254\2\257\4\0\1\255"+
    "\1\0\1\256\7\0\1\255\63\0\4\u0106\4\0\1\u0106"+
    "\11\0\1\u0106\4\0\2\u0106\1\0\2\u0106\3\0\1\u0106"+
    "\6\0\1\u0106\25\0\3\115\7\0\6\115\1\0\2\115"+
    "\6\0\1\u0107\5\115\1\0\17\115\1\0\2\115\24\0"+
    "\3\115\7\0\6\115\1\0\2\115\6\0\6\115\1\0"+
    "\6\115\1\u0108\10\115\1\0\2\115\22\0\4\274\1\u0109"+
    "\10\274\3\u0109\6\274\1\0\57\274\4\0\1\272\10\0"+
    "\3\272\70\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\3\145\1\u010a\2\145\1\0\2\145\1\u010b"+
    "\14\145\1\0\2\145\24\0\3\145\2\0\1\145\4\0"+
    "\6\145\1\0\2\145\6\0\5\145\1\u010c\1\0\2\145"+
    "\1\u010d\10\145\1\u010e\3\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\3\145"+
    "\1\u010f\2\145\1\0\17\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\15\145\1\u0110\1\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\1\145"+
    "\1\u0111\4\145\1\0\6\145\1\u0112\10\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\6\145\1\u0113\10\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\3\145\1\u0114\2\145\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\3\145\1\u0115\2\145\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\1\145\1\u0116\4\145\1\0\2\145\1\u0117\14\145"+
    "\1\0\2\145\24\0\3\145\2\0\1\145\4\0\6\145"+
    "\1\0\2\145\6\0\4\145\1\u0118\1\145\1\0\17\145"+
    "\1\0\2\145\24\0\3\145\2\0\1\145\4\0\6\145"+
    "\1\0\2\145\6\0\5\145\1\u0119\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\3\145\1\u011a\2\145\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\3\145\1\u011b\2\145\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\6\145\1\0\2\145\1\u011c\14\145\1\0"+
    "\2\145\22\0\13\315\1\u011d\72\315\12\u011e\1\u011f\1\316"+
    "\72\u011e\5\156\1\320\4\156\1\u0120\73\156\23\0\1\321"+
    "\10\0\1\321\13\0\1\321\3\0\2\321\32\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\4\14"+
    "\1\u0121\1\14\1\0\17\14\1\0\2\14\57\0\1\u0122"+
    "\125\0\1\u0123\76\0\1\u0124\76\0\1\u0125\50\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\1\u0126"+
    "\4\14\1\u0127\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\1\14"+
    "\1\u0128\4\14\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u0129\2\14\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u012a\2\14\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\1\u012b"+
    "\5\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u012c"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u012d"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\1\u012e\1\14\6\0\6\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\6\14"+
    "\1\u012f\10\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\u0130\1\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\u0131\5\14\1\0"+
    "\17\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\2\14\1\u0132"+
    "\14\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\7\14\1\u0133"+
    "\7\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\2\14\1\u0134"+
    "\14\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\2\14\1\u0135"+
    "\14\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\2\14\1\u0136"+
    "\14\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\13\14\1\u0137"+
    "\3\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\11\14\1\u0138"+
    "\5\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\16\14\1\u0139"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u013a\3\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u013b\2\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\13\14\1\u013c\3\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\5\14\1\u013d\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u013e\2\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\15\14\1\u013f\1\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\3\14\1\u0140\13\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\u0141\5\14\1\0\17\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\13\14\1\u0142\3\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\7\14\1\u0143\7\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\11\14\1\u0144\5\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\3\14\1\u0145\2\14\1\0\7\14\1\u0146\7\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u0147\7\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u0148\2\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u0149\7\14"+
    "\1\0\2\14\24\0\3\103\7\0\6\103\1\0\2\103"+
    "\6\0\6\103\1\0\13\103\1\u014a\3\103\1\0\2\103"+
    "\22\0\4\u0103\1\u014b\10\u0103\3\u014b\6\u0103\1\0\57\u0103"+
    "\4\0\1\u0101\10\0\3\u0101\70\0\3\115\7\0\6\115"+
    "\1\0\2\115\6\0\6\115\1\0\13\115\1\u014c\3\115"+
    "\1\0\2\115\24\0\3\115\7\0\6\115\1\0\2\115"+
    "\6\0\3\115\1\u014d\2\115\1\0\17\115\1\0\2\115"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\7\145\1\u014e\7\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\11\145\1\u014f\5\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\4\145\1\u0150\12\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\7\145\1\u0151\7\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\17\145\1\0\1\145\1\u0152\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\3\145\1\u0153\2\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\2\145\1\u0154\3\145\1\0\7\145\1\u0155\7\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\1\145\1\u0156\4\145\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\6\145\1\0\7\145\1\u0157\7\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\3\145\1\u0158\2\145\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\6\145\1\0\1\145\1\u0159\15\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\2\145\1\u015a\3\145\1\0\17\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\6\145\1\0\3\145\1\u015b\13\145\1\0"+
    "\2\145\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\5\145\1\u015c\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\4\145\1\u015d\1\145\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\7\145\1\u015e\7\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\7\145\1\u015f\7\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\11\145\1\u0160\5\145\1\0\2\145"+
    "\22\0\12\315\1\u0161\1\u011d\72\315\13\u011e\1\u0162\72\u011e"+
    "\5\156\1\320\4\156\1\321\10\156\1\u0120\10\156\1\u0120"+
    "\13\156\1\u0120\3\156\2\u0120\30\156\2\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\5\14\1\u0163"+
    "\1\0\17\14\1\0\2\14\60\0\1\147\105\0\1\u0164"+
    "\107\0\1\u0165\47\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u0166\2\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\4\14\1\u0167\1\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u0168\3\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\4\14\1\u0169\1\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\4\14\1\u016a\1\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u016b\1\14\1\u016c\1\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\u016d\1\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\u016e\1\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\3\14\1\u016f\2\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\3\14"+
    "\1\u0170\13\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\u0171\1\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\6\14"+
    "\1\u0172\10\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\1\u0173\1\14\6\0\6\14\1\0"+
    "\17\14\1\0\2\14\24\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\1\u0174\5\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u0175\2\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u0176\7\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\10\14\1\u0177\6\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\12\14\1\u0178\4\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\1\u0179\16\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\4\14\1\u017a\12\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\2\14\1\u017b\14\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\2\14\1\u017c\14\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u017d\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\13\14\1\u017e\3\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u017f\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\14\14\1\u0180\2\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u0181\5\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\u0182\1\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u0183\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\115\7\0\6\115\1\0\2\115\6\0"+
    "\3\115\1\u0184\2\115\1\0\17\115\1\0\2\115\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\2\145\1\u0185\14\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\4\145\1\u0186\1\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\3\145\1\u0187\2\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\1\145\1\u0188\4\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\6\145\1\u0189\10\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\4\145\1\u018a\1\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\4\145\1\u018b\12\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\1\u018c\1\145"+
    "\6\0\6\145\1\0\17\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\1\u018d"+
    "\5\145\1\0\17\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\2\145\6\0\5\145\1\u018e"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\10\145"+
    "\1\u018f\6\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\6\145"+
    "\1\u0190\10\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\2\145"+
    "\1\u0191\14\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u0192\2\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\7\145"+
    "\1\u0193\7\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u0194\2\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\7\145"+
    "\1\u0195\7\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\7\145"+
    "\1\u0196\7\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\3\145"+
    "\1\u0197\13\145\1\0\2\145\22\0\12\u011e\1\u011f\1\u0162"+
    "\72\u011e\2\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\17\14\1\u0198\2\14\56\0"+
    "\1\u0199\110\0\1\147\50\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\1\u019a\1\14\6\0\6\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u019b\7\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u019c\2\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\5\14\1\u019d\11\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\4\14\1\u019e\12\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u019f\3\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u01a0\3\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\1\14\1\u01a1\4\14\1\0\17\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\u01a2\14\14"+
    "\1\0\2\14\24\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\1\u01a3\5\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u01a4\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u01a5\4\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u01a6\2\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u01a7\2\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\7\14\1\u01a8\7\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\12\14\1\u01a9\4\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u01aa\5\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\2\14\1\u01ab\3\14\1\0\17\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\14\14\1\u01ac\2\14\1\0"+
    "\2\14\24\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u01ad\5\14\1\0"+
    "\2\14\24\0\3\145\2\0\1\145\4\0\6\145\1\0"+
    "\2\145\6\0\5\145\1\u01ae\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\1\145\1\u01af\15\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\6\145\1\0\15\145\1\u01b0\1\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\1\145\1\u01b1\4\145\1\0\17\145\1\0\2\145"+
    "\24\0\3\145\2\0\1\145\4\0\6\145\1\0\2\145"+
    "\6\0\1\u01b2\5\145\1\0\17\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\2\145\1\u01b3\14\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\4\145\1\u01b4\12\145\1\0\2\145\24\0"+
    "\3\145\2\0\1\145\4\0\6\145\1\0\2\145\6\0"+
    "\6\145\1\0\17\145\1\0\1\u01b5\1\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\12\145\1\u01b6\4\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\1\u01b7"+
    "\5\145\1\0\17\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\1\145\1\u01b8\6\0\6\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u01b9\2\145"+
    "\1\0\17\145\1\0\2\145\24\0\1\145\1\u01ba\1\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u01bb\2\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u01bc\2\145"+
    "\1\0\17\145\1\0\2\145\103\0\1\u0198\73\0\1\u01bd"+
    "\40\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\3\14\1\u01be\2\14\1\0\17\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\2\14\1\u01bf\14\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\13\14\1\u01c0\3\14\1\0\2\14"+
    "\24\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\17\14\1\u01c1\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\4\14\1\u01c2\12\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\11\14\1\u01c3\5\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01c4\7\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\11\14\1\u01c5\5\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\5\14"+
    "\1\u01c6\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\4\14\1\u01c7\12\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\5\14\1\u01c8\11\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u01c9"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u01ca"+
    "\2\14\1\0\17\14\1\0\2\14\24\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\6\14\1\u01cb\10\14\1\0\2\14\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\2\145\6\0\6\145\1\0"+
    "\6\145\1\u01cc\10\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\2\145\6\0\3\145\1\u01cd"+
    "\2\145\1\0\17\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\2\145\6\0\4\145\1\u01ce"+
    "\1\145\1\0\17\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\2\145\6\0\5\145\1\u01cf"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\10\145"+
    "\1\u01d0\6\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\6\145"+
    "\1\u01d1\10\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\2\145\1\u01d2\3\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\11\145"+
    "\1\u01d3\5\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\2\145"+
    "\1\u01d4\14\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\4\145\1\u01d5\1\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\4\145\1\u01d6\1\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\2\14\1\u01d7\3\14"+
    "\1\0\17\14\1\0\2\14\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\11\14"+
    "\1\u01d8\5\14\1\0\2\14\103\0\1\u01c1\26\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01d9\2\14\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01da\7\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\2\14"+
    "\1\u01db\3\14\1\0\17\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01dc\2\14\1\0\17\14\1\0\2\14\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\12\145\1\u01dd\4\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\3\145"+
    "\1\u01de\2\145\1\0\17\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\2\145\1\u01df\14\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\1\145"+
    "\1\u01e0\4\145\1\0\17\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\6\145\1\u01e1\10\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\7\145\1\u01e2\7\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\10\145\1\u01e3\6\145\1\0\2\145\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01e4\7\14\1\0\2\14\24\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01e5\2\14\1\0\17\14\1\0\2\14\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\6\145"+
    "\1\0\4\145\1\u01e6\12\145\1\0\2\145\24\0\3\145"+
    "\2\0\1\145\4\0\6\145\1\0\2\145\6\0\1\u01e7"+
    "\5\145\1\0\17\145\1\0\2\145\24\0\3\145\2\0"+
    "\1\145\4\0\6\145\1\0\1\u01e8\1\145\6\0\6\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\3\145\1\u01e9\2\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\1\145\1\u01ea\4\145"+
    "\1\0\17\145\1\0\2\145\24\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\13\14"+
    "\1\u01eb\3\14\1\0\2\14\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\4\145"+
    "\1\u01ec\12\145\1\0\2\145\24\0\3\145\2\0\1\145"+
    "\4\0\6\145\1\0\2\145\6\0\6\145\1\0\4\145"+
    "\1\u01ed\12\145\1\0\2\145\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\10\1\3\11\6\1\1\11"+
    "\13\1\6\11\1\1\1\11\2\1\1\11\10\1\1\11"+
    "\1\1\1\11\5\1\1\11\1\1\2\11\6\1\2\11"+
    "\2\1\2\11\7\1\1\0\1\11\1\1\3\0\1\1"+
    "\1\0\2\1\2\11\1\1\1\0\1\11\1\0\1\1"+
    "\3\11\4\0\43\1\13\11\1\1\3\11\1\1\1\11"+
    "\1\1\3\0\1\1\1\0\2\1\7\11\2\0\1\11"+
    "\23\1\1\0\2\1\1\11\1\0\1\11\3\0\46\1"+
    "\1\11\1\1\2\0\1\11\31\1\1\0\1\1\1\11"+
    "\2\1\2\0\1\11\1\0\73\1\1\11\1\0\2\1"+
    "\1\0\63\1\1\0\43\1\1\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    static final HaxeDebugLogger LOG = HaxeDebugLogger.getLogger();
    static {      // Take this out when finished debugging.
      LOG.setLevel(org.apache.log4j.Level.DEBUG);
    }

    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    Project context; // Required for conditional compilation support.
    public HaxeConditionalCompilationLexerSupport ccsupport;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        if(state == COMPILER_CONDITIONAL) {
          return "COMPILER_CONDITIONAL";
        }
        if(state == CC_STRING) {
          return "CC_STRING";
        }
        if(state == CC_APOS_STRING) {
          return "CC_APOS_STRING";
        }
        if(state == CC_BLOCK) {
          return "CC_BLOCK";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    /** Map output within conditional blocks to comments if the condition is false. */
    private IElementType emitToken(IElementType tokenType) {
        if (ccsupport.currentContextIsActive()) {
           return tokenType;
        } else {
            return ccsupport.mapToken(tokenType);
        }
    }

    /** Deal with compiler conditional block constructs (e.g. #if...#end). */
    private IElementType processConditional(IElementType type) {
        ccsupport.processConditional(yytext(), type);

        if (PPIF.equals(type)) {
            ccStart();
        } else if (PPEND.equals(type)) {
            ccEnd();
        } else if (zzLexicalState != CC_BLOCK) {
            // Maybe the #if is missing, but if we're not at the end, we want to be sure that we're
            // in the conditional state.
            LOG.debug("Unexpected lexical state. Missing starting #if?");
            ccStart();
        }

        if (PPIF.equals(type) || PPELSEIF.equals(type)) {
            conditionStart();
        }
        return type;
    }

    // These deal with the state of lexing the *condition* for compiler conditionals
    private void conditionStart() { pushState(COMPILER_CONDITIONAL); ccsupport.conditionStart(); }
    private boolean conditionIsComplete() { return ccsupport.conditionIsComplete(); }
    private IElementType conditionAppend(IElementType type) {
        ccsupport.conditionAppend(yytext(),type);
        if (ccsupport.conditionIsComplete()) {
            conditionEnd();
        }
        return PPEXPRESSION;
    }
    private void conditionEnd() {
        ccsupport.conditionEnd();
        popState();
    }

    // We use the CC_BLOCK state to tell the highlighters, etc. that their context
    // has to go back to the start of the conditional (even though that may be a ways).  Basically,
    // we need to keep the state as something other than YYINITIAL.
    private void ccStart() { pushState(CC_BLOCK); } // Until we know better
    private void ccEnd() {
        // When there is no #if, but there is an end, popping the state produces an EmptyStackException
        // and messes up further processing.
        if (zzLexicalState == CC_BLOCK) {
            popState();
        }
    }

    // There are two other constructors generated for us.  This is the only one that is actually used.
    public _HaxeLexer(Project context) {
      this((java.io.Reader)null);
      this.context = context;
      ccsupport = new HaxeConditionalCompilationLexerSupport(context);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);
                                                                          return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
            }
          case 162: break;
          case 2: 
            { return emitToken( com.intellij.psi.TokenType.WHITE_SPACE);
            }
          case 163: break;
          case 3: 
            { return emitToken( ID);
            }
          case 164: break;
          case 4: 
            { return emitToken( OCOLON);
            }
          case 165: break;
          case 5: 
            { return emitToken( OQUOTIENT);
            }
          case 166: break;
          case 6: 
            { return emitToken( OMUL);
            }
          case 167: break;
          case 7: 
            { return emitToken( LITINT);
            }
          case 168: break;
          case 8: 
            { return emitToken( OPLUS);
            }
          case 169: break;
          case 9: 
            { return emitToken( ODOT);
            }
          case 170: break;
          case 10: 
            { pushState(QUO_STRING); return emitToken( OPEN_QUOTE);
            }
          case 171: break;
          case 11: 
            { pushState(APOS_STRING); return emitToken( OPEN_QUOTE);
            }
          case 172: break;
          case 12: 
            { return emitToken( PLCURLY);
            }
          case 173: break;
          case 13: 
            { return emitToken( PRCURLY);
            }
          case 174: break;
          case 14: 
            { return emitToken( PLBRACK);
            }
          case 175: break;
          case 15: 
            { return emitToken( PRBRACK);
            }
          case 176: break;
          case 16: 
            { return emitToken( PLPAREN);
            }
          case 177: break;
          case 17: 
            { return emitToken( PRPAREN);
            }
          case 178: break;
          case 18: 
            { return emitToken( OSEMI);
            }
          case 179: break;
          case 19: 
            { return emitToken( OCOMMA);
            }
          case 180: break;
          case 20: 
            { return emitToken( OMINUS);
            }
          case 181: break;
          case 21: 
            { return emitToken( OGREATER);
            }
          case 182: break;
          case 22: 
            { return emitToken( OASSIGN);
            }
          case 183: break;
          case 23: 
            { return emitToken( ONOT);
            }
          case 184: break;
          case 24: 
            { return emitToken( OQUEST);
            }
          case 185: break;
          case 25: 
            { return emitToken( OBIT_OR);
            }
          case 186: break;
          case 26: 
            { return emitToken( OBIT_AND);
            }
          case 187: break;
          case 27: 
            { return emitToken( OLESS);
            }
          case 188: break;
          case 28: 
            { return emitToken( OBIT_XOR);
            }
          case 189: break;
          case 29: 
            { return emitToken( OREMAINDER);
            }
          case 190: break;
          case 30: 
            { return emitToken( REGULAR_STRING_PART);
            }
          case 191: break;
          case 31: 
            { return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
            }
          case 192: break;
          case 32: 
            { popState(); return emitToken( CLOSING_QUOTE);
            }
          case 193: break;
          case 33: 
            { popState(); return emitToken( ID);
            }
          case 194: break;
          case 34: 
            { lBraceCount++; return emitToken( PLCURLY);
            }
          case 195: break;
          case 35: 
            { if (lBraceCount == 0) {
                                                popState();
                                                return emitToken( LONG_TEMPLATE_ENTRY_END);
                                              }
                                              lBraceCount--;
                                              return emitToken( PRCURLY);
            }
          case 196: break;
          case 36: 
            { LOG.debug("Bad termination of PP condition: \"" + yytext() + "\"");
                                            yypushback(1);
                                            conditionEnd();
                                            return PPBODY;
            }
          case 197: break;
          case 37: 
            { return conditionAppend(com.intellij.psi.TokenType.WHITE_SPACE);
            }
          case 198: break;
          case 38: 
            { return conditionAppend( ID );
            }
          case 199: break;
          case 39: 
            { return conditionAppend( LITINT );
            }
          case 200: break;
          case 40: 
            { pushState(CC_STRING); return conditionAppend( OPEN_QUOTE );
            }
          case 201: break;
          case 41: 
            { pushState(CC_APOS_STRING); return conditionAppend( OPEN_QUOTE );
            }
          case 202: break;
          case 42: 
            { return conditionAppend( PLPAREN );
            }
          case 203: break;
          case 43: 
            { return conditionAppend( PRPAREN );
            }
          case 204: break;
          case 44: 
            { return conditionAppend( OGREATER );
            }
          case 205: break;
          case 45: 
            { return conditionAppend( ONOT );
            }
          case 206: break;
          case 46: 
            { return conditionAppend( OLESS );
            }
          case 207: break;
          case 47: 
            { return conditionAppend( REGULAR_STRING_PART );
            }
          case 208: break;
          case 48: 
            { popState(); return conditionAppend( CLOSING_QUOTE );
            }
          case 209: break;
          case 49: 
            { return emitToken( MACRO_ID);
            }
          case 210: break;
          case 50: 
            { return emitToken( MSL_COMMENT);
            }
          case 211: break;
          case 51: 
            { return emitToken( MML_COMMENT);
            }
          case 212: break;
          case 52: 
            { return emitToken( OQUOTIENT_ASSIGN);
            }
          case 213: break;
          case 53: 
            { return emitToken( OMUL_ASSIGN);
            }
          case 214: break;
          case 54: 
            { return emitToken( LITOCT);
            }
          case 215: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return emitToken( OCOMPLEMENT);
            }
          case 216: break;
          case 56: 
            { return emitToken( OPLUS_PLUS);
            }
          case 217: break;
          case 57: 
            { return emitToken( OPLUS_ASSIGN);
            }
          case 218: break;
          case 58: 
            { return emitToken( TWILDCARD);
            }
          case 219: break;
          case 59: 
            { return emitToken( OIN);
            }
          case 220: break;
          case 60: 
            { return emitToken( KIF );
            }
          case 221: break;
          case 61: 
            { return emitToken( KDO );
            }
          case 222: break;
          case 62: 
            { return emitToken( OMINUS_MINUS);
            }
          case 223: break;
          case 63: 
            { return emitToken( OARROW);
            }
          case 224: break;
          case 64: 
            { return emitToken( OMINUS_ASSIGN);
            }
          case 225: break;
          case 65: 
            { return emitToken( OFAT_ARROW);
            }
          case 226: break;
          case 66: 
            { return emitToken( OEQ);
            }
          case 227: break;
          case 67: 
            { return emitToken( ONOT_EQ);
            }
          case 228: break;
          case 68: 
            { return emitToken( OBIT_OR_ASSIGN);
            }
          case 229: break;
          case 69: 
            { return emitToken( OCOND_OR);
            }
          case 230: break;
          case 70: 
            { return emitToken( OBIT_AND_ASSIGN);
            }
          case 231: break;
          case 71: 
            { return emitToken( OCOND_AND);
            }
          case 232: break;
          case 72: 
            { return emitToken( OLESS_OR_EQUAL);
            }
          case 233: break;
          case 73: 
            { return emitToken( OSHIFT_LEFT);
            }
          case 234: break;
          case 74: 
            { return emitToken( OBIT_XOR_ASSIGN);
            }
          case 235: break;
          case 75: 
            { return emitToken( OREMAINDER_ASSIGN);
            }
          case 236: break;
          case 76: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return emitToken( SHORT_TEMPLATE_ENTRY_START);
            }
          case 237: break;
          case 77: 
            { pushState(LONG_TEMPLATE_ENTRY); return emitToken( LONG_TEMPLATE_ENTRY_START);
            }
          case 238: break;
          case 78: 
            { return conditionAppend( LITOCT );
            }
          case 239: break;
          case 79: 
            { return conditionAppend( OGREATER_OR_EQUAL );
            }
          case 240: break;
          case 80: 
            { return conditionAppend( OEQ );
            }
          case 241: break;
          case 81: 
            { return conditionAppend( ONOT_EQ );
            }
          case 242: break;
          case 82: 
            { return conditionAppend( OCOND_OR );
            }
          case 243: break;
          case 83: 
            { return conditionAppend( OCOND_AND );
            }
          case 244: break;
          case 84: 
            { return conditionAppend( OLESS_OR_EQUAL );
            }
          case 245: break;
          case 85: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return emitToken( LITFLOAT);
            }
          case 246: break;
          case 86: 
            { return emitToken( DOC_COMMENT);
            }
          case 247: break;
          case 87: 
            { return emitToken( LITHEX);
            }
          case 248: break;
          case 88: 
            { return emitToken( REG_EXP);
            }
          case 249: break;
          case 89: 
            { return emitToken( OTRIPLE_DOT);
            }
          case 250: break;
          case 90: 
            { return processConditional(PPIF);
            }
          case 251: break;
          case 91: 
            { return emitToken( ONEW);
            }
          case 252: break;
          case 92: 
            { return emitToken( KFOR );
            }
          case 253: break;
          case 93: 
            { return emitToken( KTRY);
            }
          case 254: break;
          case 94: 
            { return emitToken( KVAR);
            }
          case 255: break;
          case 95: 
            { return emitToken( OSHIFT_LEFT_ASSIGN);
            }
          case 256: break;
          case 96: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return conditionAppend( LITFLOAT );
            }
          case 257: break;
          case 97: 
            { return conditionAppend( LITHEX );
            }
          case 258: break;
          case 98: 
            { return emitToken( KNS);
            }
          case 259: break;
          case 99: 
            { return processConditional(PPEND);
            }
          case 260: break;
          case 100: 
            { return emitToken( KNULL );
            }
          case 261: break;
          case 101: 
            { return emitToken( KELSE );
            }
          case 262: break;
          case 102: 
            { return emitToken( KENUM);
            }
          case 263: break;
          case 103: 
            { return emitToken( KTRUE );
            }
          case 264: break;
          case 104: 
            { return emitToken( KTHIS );
            }
          case 265: break;
          case 105: 
            { return emitToken( KCASE);
            }
          case 266: break;
          case 106: 
            { return emitToken( KCAST);
            }
          case 267: break;
          case 107: 
            { popState(); return emitToken( KTHIS);
            }
          case 268: break;
          case 108: 
            { return conditionAppend( KTRUE );
            }
          case 269: break;
          case 109: 
            { return processConditional(PPELSE);
            }
          case 270: break;
          case 110: 
            { return emitToken( KNEVER);
            }
          case 271: break;
          case 111: 
            { return emitToken( KWHILE );
            }
          case 272: break;
          case 112: 
            { return emitToken( KBREAK);
            }
          case 273: break;
          case 113: 
            { return emitToken( KFINAL);
            }
          case 274: break;
          case 114: 
            { return emitToken( KFALSE );
            }
          case 275: break;
          case 115: 
            { return emitToken( KUSING );
            }
          case 276: break;
          case 116: 
            { return emitToken( KTHROW );
            }
          case 277: break;
          case 117: 
            { return emitToken( KCLASS);
            }
          case 278: break;
          case 118: 
            { return emitToken( KCATCH);
            }
          case 279: break;
          case 119: 
            { return emitToken( KSUPER );
            }
          case 280: break;
          case 120: 
            { return conditionAppend( KFALSE );
            }
          case 281: break;
          case 121: 
            { return emitToken( KMETA);
            }
          case 282: break;
          case 122: 
            { return emitToken( KBIND);
            }
          case 283: break;
          case 123: 
            { return emitToken( KKEEP);
            }
          case 284: break;
          case 124: 
            { return emitToken( KHACK);
            }
          case 285: break;
          case 125: 
            { return emitToken( KMACRO2);
            }
          case 286: break;
          case 126: 
            { return emitToken( KIMPORT );
            }
          case 287: break;
          case 127: 
            { return emitToken( KINLINE);
            }
          case 288: break;
          case 128: 
            { return emitToken( KRETURN );
            }
          case 289: break;
          case 129: 
            { return emitToken( KPUBLIC);
            }
          case 290: break;
          case 130: 
            { return emitToken( KSWITCH );
            }
          case 291: break;
          case 131: 
            { return emitToken( KSTATIC);
            }
          case 292: break;
          case 132: 
            { return emitToken( KMACRO);
            }
          case 293: break;
          case 133: 
            { return emitToken( KBUILD);
            }
          case 294: break;
          case 134: 
            { return emitToken( KDEBUG);
            }
          case 295: break;
          case 135: 
            { return emitToken( KFINAL_META);
            }
          case 296: break;
          case 136: 
            { return processConditional(PPELSEIF);
            }
          case 297: break;
          case 137: 
            { return emitToken( KEXTENDS);
            }
          case 298: break;
          case 138: 
            { return emitToken( KEXTERN);
            }
          case 299: break;
          case 139: 
            { return emitToken( KDEFAULT);
            }
          case 300: break;
          case 140: 
            { return emitToken( KDYNAMIC);
            }
          case 301: break;
          case 141: 
            { return emitToken( KUNTYPED);
            }
          case 302: break;
          case 142: 
            { return emitToken( KTYPEDEF);
            }
          case 303: break;
          case 143: 
            { return emitToken( KPRIVATE);
            }
          case 304: break;
          case 144: 
            { return emitToken( KPACKAGE);
            }
          case 305: break;
          case 145: 
            { return emitToken( KNATIVE);
            }
          case 306: break;
          case 146: 
            { return emitToken( KBITMAP);
            }
          case 307: break;
          case 147: 
            { return emitToken( KGETTER);
            }
          case 308: break;
          case 148: 
            { return emitToken( KSETTER);
            }
          case 309: break;
          case 149: 
            { return emitToken( KOVERRIDE);
            }
          case 310: break;
          case 150: 
            { return emitToken( KABSTRACT);
            }
          case 311: break;
          case 151: 
            { return emitToken( KFUNCTION);
            }
          case 312: break;
          case 152: 
            { return emitToken( KCONTINUE );
            }
          case 313: break;
          case 153: 
            { return emitToken( KNODEBUG);
            }
          case 314: break;
          case 154: 
            { return emitToken( KREQUIRE);
            }
          case 315: break;
          case 155: 
            { return emitToken( KINTERFACE);
            }
          case 316: break;
          case 156: 
            { return emitToken( KOVERLOAD);
            }
          case 317: break;
          case 157: 
            { return emitToken( KFAKEENUM);
            }
          case 318: break;
          case 158: 
            { return emitToken( KCOREAPI);
            }
          case 319: break;
          case 159: 
            { return emitToken( KIMPLEMENTS);
            }
          case 320: break;
          case 160: 
            { return emitToken( KAUTOBUILD);
            }
          case 321: break;
          case 161: 
            { return emitToken( KPROTECTED);
            }
          case 322: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
